{
	"info": {
		"_postman_id": "a701c641-d327-4f2b-bf58-0f9ec6065f06",
		"name": "Duo Auth API",
		"description": "Collection of examples for the available Duo Auth API endpoints.\n\n##### API Authentication\n\n> This Collection includes a `pre-request` script that is responsible for handling the per request requirement to include a dynamically generated HTTP `Authorization` header. \n  \n\n##### Troubleshooting\n\n> The `pre-request` script also includes logging capabilties to help in troubleshooting any request failures. Those logging messages are output to the Postman console. \n  \n\n##### Requirements\n\n> The `pre-request` script relies on the availability of the Duo Auth API application integration details from the Duo Admin Panel. These details are the Integration key (`ikey`), Secret key (`skey`), API hostname (`host`). The values for each of these should be stored in a Postman Environment variables (`ikey`, `skey`, and `apihost` respectively) where this Collection will be executed, or within this Collection variables table.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12279134"
	},
	"item": [
		{
			"name": "API Status Checks",
			"item": [
				{
					"name": "Auth API Ping",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/ping",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"ping"
							]
						},
						"description": "Test if the Duo API endpoints service is available"
					},
					"response": []
				},
				{
					"name": "Check API status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/check",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"check"
							]
						},
						"description": "Validate the ikey/skey combination against the Duo api-hostname"
					},
					"response": [
						{
							"name": "Check API status example success response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https:///auth/v2/check",
									"protocol": "https",
									"path": [
										"auth",
										"v2",
										"check"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Thu, 14 Mar 2024 15:15:44 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Etag",
									"value": "\"c53f031474079c09641bf7b28b9b877fa223a9e8\""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"time\": 1710429344\n    },\n    \"stat\": \"OK\"\n}"
						},
						{
							"name": "Check API status example credential failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/auth/v2/check",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"check"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:41:15 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "92"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 40102,\n    \"message\": \"Invalid integration key in request credentials\",\n    \"stat\": \"FAIL\"\n}"
						},
						{
							"name": "Check API status example wrong API response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/auth/v2/check",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"check"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:41:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 40301,\n    \"message\": \"Access forbidden\",\n    \"message_detail\": \"Wrong integration type for this API.\",\n    \"stat\": \"FAIL\"\n}"
						}
					]
				}
			],
			"description": "General requests to verify availability of the Duo API endpoints"
		},
		{
			"name": "User Enrollment",
			"item": [
				{
					"name": "Enroll new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Activation code is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response.activation_code).to.exist.and.to.have.lengthOf.at.least(1, \"Activation code should not be empty\");",
									"",
									"    pm.collectionVariables.set(\"activation_code\", responseData.response.activation_code);",
									"    console.log(\"Activation code: \", responseData.response.activation_code);",
									"});",
									"",
									"pm.test(\"User ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response.user_id).to.exist.and.to.have.lengthOf.at.least(1, \"User ID should not be empty\");",
									"",
									"    pm.collectionVariables.set(\"user_id\", responseData.response.user_id);",
									"    console.log(\"User ID: \", responseData.response.user_id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "",
									"description": "[REQUIRED] The username to enroll. Creates the user in Duo and returns a code (as a QR code) that Duo Mobile can scan with its built-in camera. Scanning the QR code adds the user's account to the app so that they receive and respond to Duo Push login requests.\n\n",
									"type": "text"
								},
								{
									"key": "valid_secs",
									"value": "",
									"description": "Optional: Seconds for which the activation code will remain valid. Default: 86400 (one day).",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/enroll",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"enroll"
							]
						},
						"description": "Enroll a new user in Duo"
					},
					"response": [
						{
							"name": "Example success response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "",
											"description": "The username to enroll. Creates the user in Duo and returns a code (as a QR code) that Duo Mobile can scan with its built-in camera. Scanning the QR code adds the user's account to the app so that they receive and respond to Duo Push login requests.\n\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "valid_secs",
											"value": "",
											"description": "Optional: Seconds for which the activation code will remain valid. Default: 86400 (one day).",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https:///auth/v2/enroll",
									"protocol": "https",
									"path": [
										"auth",
										"v2",
										"enroll"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Fri, 20 Oct 2023 16:27:20 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "460"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"activation_barcode\": \"https://api-267c0646.duosecurity.com/frame/qr?value=duo%3A%2F%2F4FCELXdby5IvBEjBp6BT-YXBpLTI2N2MwNjQ2LmR1b3NlY3VyaXR5LmNvbQ\",\n        \"activation_code\": \"duo://4FCELXdby5IvBEjBp6BT-YXBpLTI2N2MwNjQ2LmR1b3NlY3VyaXR5LmNvbQ\",\n        \"activation_url\": \"https://m-267c0646.duosecurity.com/activate/4FCELXdby5IvBEjBp6BT\",\n        \"expiration\": 1697905640,\n        \"user_id\": \"DUKVGHTEPSSS7I388F7P\",\n        \"username\": \"d8a83e0ab50dc249ce87e24100b7cc80\"\n    },\n    \"stat\": \"OK\"\n}"
						}
					]
				},
				{
					"name": "Check Enrollment Status",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/enroll_status?activation_code={{activation_code}}&user_id={{user_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"enroll_status"
							],
							"query": [
								{
									"key": "activation_code",
									"value": "{{activation_code}}",
									"description": "Required: Activation code returned from a call to the /enroll API endpoint."
								},
								{
									"key": "user_id",
									"value": "{{user_id}}",
									"description": "Required: ID of user returned from a call to the /enroll API endpoint."
								}
							]
						},
						"description": "Check the status of a previous enrollment event for completion"
					},
					"response": [
						{
							"name": "Check Enrollment Status example waiting response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https:///auth/v2/enroll_status?activation_code=&user_id=",
									"protocol": "https",
									"path": [
										"auth",
										"v2",
										"enroll_status"
									],
									"query": [
										{
											"key": "activation_code",
											"value": "",
											"description": "Required: Activation code returned from a call to the /enroll API endpoint."
										},
										{
											"key": "user_id",
											"value": "",
											"description": "Required: ID of user returned from a call to the /enroll API endpoint."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Thu, 14 Mar 2024 15:17:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "37"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": \"waiting\",\n    \"stat\": \"OK\"\n}"
						},
						{
							"name": "Check Enrollment Status example expired response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/enroll_status?activation_code={{activation_code}}&user_id={{user_id}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"enroll_status"
									],
									"query": [
										{
											"key": "activation_code",
											"value": "{{activation_code}}",
											"description": "Required: Activation code returned from a call to the /enroll API endpoint."
										},
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"description": "Required: ID of user returned from a call to the /enroll API endpoint."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:39:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "37"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": \"invalid\",\n    \"stat\": \"OK\"\n}"
						}
					]
				}
			],
			"description": "Examples for the Duo Auth API user enrollment endpoints"
		},
		{
			"name": "Synchronous User Authentication",
			"item": [
				{
					"name": "Pre-auth user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_id",
									"value": "",
									"description": "[Required] If 'username' not given",
									"type": "text",
									"disabled": true
								},
								{
									"key": "username",
									"value": "mark@duomark.net",
									"description": "[Required] If 'user_id' not given",
									"type": "text"
								},
								{
									"key": "ipaddr",
									"value": "",
									"description": "[Optional] IP address to include in the preauth request",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hostname",
									"value": "",
									"description": "[Optional] Hostname to include in the preauth request",
									"type": "text",
									"disabled": true
								},
								{
									"key": "trusted_device_token",
									"value": "",
									"description": "[Optional] If the trusted_device_token is present and the Auth API application has an effective policy that enables Remembered Devices for each browser-based application, return an \"allow\" response for the lifetime of the token as set by the Duo administrator in the policy.",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/preauth",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"preauth"
							]
						},
						"description": "The **/preauth** endpoint is used to determine if a user is enrolled in Duo and allowed to authenticate via the Duo Auth API integration. If successful, it will return a list of the available MFA factors/devices that may be used in the user authentication action via the **/auth** endpoint."
					},
					"response": [
						{
							"name": "Pre-auth user successful result example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user_id",
											"value": "",
											"description": "[Required] If 'username' not given",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "postman_test_user",
											"description": "[Required] If 'user_id' not given",
											"type": "text"
										},
										{
											"key": "ipaddr",
											"value": "",
											"description": "[Optional] IP address to include in the preauth request",
											"type": "text",
											"disabled": true
										},
										{
											"key": "hostname",
											"value": "",
											"description": "[Optional] Hostname to include in the preauth request",
											"type": "text",
											"disabled": true
										},
										{
											"key": "trusted_device_token",
											"value": "",
											"description": "[Optional] If the trusted_device_token is present and the Auth API application has an effective policy that enables Remembered Devices for each browser-based application, return an \"allow\" response for the lifetime of the token as set by the Duo administrator in the policy.",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/preauth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"preauth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 14:56:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "491"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"devices\": [\n            {\n                \"capabilities\": [\n                    \"auto\",\n                    \"push\",\n                    \"mobile_otp\"\n                ],\n                \"device\": \"DPUVFU8PQY7KB3W4R2NQ\",\n                \"display_name\": \"iOS\",\n                \"name\": \"\",\n                \"number\": \"\",\n                \"type\": \"phone\"\n            },\n            {\n                \"capabilities\": [\n                    \"auto\",\n                    \"push\",\n                    \"sms\",\n                    \"phone\",\n                    \"mobile_otp\"\n                ],\n                \"device\": \"DP80Z4GVU82OT8O1BNJF\",\n                \"display_name\": \"Marx iPhone 13_new (XXX-XXX-4788)\",\n                \"name\": \"Marx iPhone 13_new\",\n                \"number\": \"XXX-XXX-4788\",\n                \"sms_nextcode\": \"1\",\n                \"type\": \"phone\"\n            }\n        ],\n        \"result\": \"auth\",\n        \"status_msg\": \"Account is active\"\n    },\n    \"stat\": \"OK\"\n}"
						}
					]
				},
				{
					"name": "Authenticate User with Duo Mobile Push",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "",
									"description": "[Required]: Name of user to authenticate.",
									"type": "text"
								},
								{
									"key": "factor",
									"value": "auto",
									"description": "[Required]: Type of MFA used to authenticate the user. The options are 'auto', 'push', 'passcode', 'sms', phone'. The options are also limited to the types of MFA devices enrolled for a user. The available options are returned from the '/preauth' API endpoint.",
									"type": "text"
								},
								{
									"key": "device",
									"value": "auto",
									"description": "[Required]: Device to use for the authentication action when the 'factor' selected is 'auto', 'push', 'phone', or 'sms'. A value of 'auto' will instruct Duo to select the best available option.",
									"type": "text"
								},
								{
									"key": "ipaddr",
									"value": "",
									"description": "Optional: IP address of user",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hostname",
									"value": "",
									"description": "Optional: Name of device accessing the application",
									"type": "text",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Optional: Text to display in the Duo Mobile application along with the application name.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "display_username",
									"value": "",
									"description": "Optional: User name to display in the Duo Mobile application instead of the 'username' value",
									"type": "text",
									"disabled": true
								},
								{
									"key": "pushinfo",
									"value": "",
									"description": "Optional: A set of URL-encoded key/value pairs with additional contextual information associated with this authentication attempt. The Duo Mobile app will display this information to the user.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "async",
									"value": "",
									"description": "Optional: If set to '1' the response will be a transaction ID (TXID). The TXID is submitted to the auth_status API endpoint to determine the authentication result.\n",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/auth",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"auth"
							]
						},
						"description": "Example of using the Duo Auth API to authenticate a user using Duo Mobile Push"
					},
					"response": [
						{
							"name": "Authenticate User example successful response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "mark@duomark.net",
											"description": "Required: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "auto",
											"description": "Reqquired: Type of MFA used to authenticate the user. The options are 'auto', 'push', 'passcode', 'sms', phone'. The options are also limited to the types of MFA devices enrolled for a user. The available options are returned from the 'pre_auth' API endpoint.",
											"type": "text"
										},
										{
											"key": "device",
											"value": "auto",
											"type": "text"
										},
										{
											"key": "ipaddr",
											"value": "",
											"description": "Optional: IP address of user",
											"type": "text",
											"disabled": true
										},
										{
											"key": "hostname",
											"value": "",
											"description": "Optional: Name of device accessing the application",
											"type": "text",
											"disabled": true
										},
										{
											"key": "async",
											"value": "",
											"description": "Optional: If set to '1' the response will be a transaction ID (TXID). The TXID is submitted to the auth_status API endpoint to determine the authentication result.\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https:///auth/v2/auth",
									"protocol": "https",
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:35:38 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "110"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"result\": \"allow\",\n        \"status\": \"allow\",\n        \"status_msg\": \"Success. Logging you in...\"\n    },\n    \"stat\": \"OK\"\n}"
						},
						{
							"name": "Authenticate User example deny response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "mark@duomark.net",
											"description": "Required: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "auto",
											"description": "Reqquired: Type of MFA used to authenticate the user. The options are 'auto', 'push', 'passcode', 'sms', phone'. The options are also limited to the types of MFA devices enrolled for a user. The available options are returned from the 'pre_auth' API endpoint.",
											"type": "text"
										},
										{
											"key": "device",
											"value": "auto",
											"type": "text"
										},
										{
											"key": "ipaddr",
											"value": "",
											"description": "Optional: IP address of user",
											"type": "text",
											"disabled": true
										},
										{
											"key": "hostname",
											"value": "",
											"description": "Optional: Name of device accessing the application",
											"type": "text",
											"disabled": true
										},
										{
											"key": "async",
											"value": "",
											"description": "Optional: If set to '1' the response will be a transaction ID (TXID). The TXID is submitted to the auth_status API endpoint to determine the authentication result.\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:36:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "103"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"result\": \"deny\",\n        \"status\": \"deny\",\n        \"status_msg\": \"Login request denied.\"\n    },\n    \"stat\": \"OK\"\n}"
						},
						{
							"name": "Authenticate User example timeout response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "mark@duomark.net",
											"description": "Required: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "auto",
											"description": "Reqquired: Type of MFA used to authenticate the user. The options are 'auto', 'push', 'passcode', 'sms', phone'. The options are also limited to the types of MFA devices enrolled for a user. The available options are returned from the 'pre_auth' API endpoint.",
											"type": "text"
										},
										{
											"key": "device",
											"value": "auto",
											"type": "text"
										},
										{
											"key": "ipaddr",
											"value": "",
											"description": "Optional: IP address of user",
											"type": "text",
											"disabled": true
										},
										{
											"key": "hostname",
											"value": "",
											"description": "Optional: Name of device accessing the application",
											"type": "text",
											"disabled": true
										},
										{
											"key": "async",
											"value": "",
											"description": "Optional: If set to '1' the response will be a transaction ID (TXID). The TXID is submitted to the auth_status API endpoint to determine the authentication result.\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:37:48 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "101"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"result\": \"deny\",\n        \"status\": \"timeout\",\n        \"status_msg\": \"Login timed out.\"\n    },\n    \"stat\": \"OK\"\n}"
						}
					]
				},
				{
					"name": "Authenticate User with passcode",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "",
									"description": "[Required]: Name of user to authenticate.",
									"type": "text"
								},
								{
									"key": "factor",
									"value": "passcode",
									"description": "[Required]: Type 'passcode' indicates user authentication should be done via passcode generated from the Duo Mobile application, hardware token, SMS passcode, or bypass code",
									"type": "text"
								},
								{
									"key": "passcode",
									"value": "",
									"description": "[Required]: The passcode provided by the user (via some other input mechanism)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/auth",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"auth"
							]
						},
						"description": "Example of using the Duo Auth API to authenticate a user using a passcode"
					},
					"response": [
						{
							"name": "Authenticate User with passcode incorrect passcode response example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "postman_test_user",
											"description": "[Required]: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "passcode",
											"description": "[Required]: Type 'passcode' indicates user authentication should be done via passcode generated from the Duo Mobile application, hardware token, SMS passcode, or bypass code",
											"type": "text"
										},
										{
											"key": "passcode",
											"value": "",
											"description": "[Required]: The passcode provided by the user (via some other input mechanism)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 13:58:30 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "119"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"result\": \"deny\",\n        \"status\": \"deny\",\n        \"status_msg\": \"Incorrect passcode. Please try again.\"\n    },\n    \"stat\": \"OK\"\n}"
						},
						{
							"name": "Authenticate User with passcode success result example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "postman_test_user",
											"description": "[Required]: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "passcode",
											"description": "[Required]: Type 'passcode' indicates user authentication should be done via passcode generated from the Duo Mobile application, hardware token, SMS passcode, or bypass code",
											"type": "text"
										},
										{
											"key": "passcode",
											"value": "",
											"description": "[Required]: The passcode provided by the user (via some other input mechanism)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 14:37:38 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "110"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"result\": \"allow\",\n        \"status\": \"allow\",\n        \"status_msg\": \"Success. Logging you in...\"\n    },\n    \"stat\": \"OK\"\n}"
						}
					]
				},
				{
					"name": "Authenticate User with phone call",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "postman_test_user",
									"description": "[Required]: Name of user to authenticate.",
									"type": "text"
								},
								{
									"key": "factor",
									"value": "phone",
									"description": "[Required]: Factor type 'phone' indicates that user authentication should be done via phone call",
									"type": "text"
								},
								{
									"key": "device",
									"value": "auto",
									"description": "[Required]: The device ID or 'auto' for the first device assigned to the user capable of performing phone call authentication.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/auth",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"auth"
							]
						},
						"description": "Example of using the Duo Auth API to authenticate a user using a phone call"
					},
					"response": [
						{
							"name": "Authenticate User with phone call success result example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "postman_test_user",
											"description": "[Required]: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "phone",
											"description": "[Required]: Factor type 'phone' indicates that user authentication should be done via phone call",
											"type": "text"
										},
										{
											"key": "device",
											"value": "auto",
											"description": "[Required]: The device ID or 'auto' for the first device assigned to the user capable of performing phone call authentication.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 14:59:36 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "110"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"result\": \"allow\",\n        \"status\": \"allow\",\n        \"status_msg\": \"Success. Logging you in...\"\n    },\n    \"stat\": \"OK\"\n}"
						},
						{
							"name": "Authenticate User with phone call failure result example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "postman_test_user",
											"description": "[Required]: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "phone",
											"description": "[Required]: Factor type 'phone' indicates that user authentication should be done via phone call",
											"type": "text"
										},
										{
											"key": "device",
											"value": "auto",
											"description": "[Required]: The device ID or 'auto' for the first device assigned to the user capable of performing phone call authentication.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 15:00:11 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "121"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"result\": \"deny\",\n        \"status\": \"deny\",\n        \"status_msg\": \"No keypress detected. Please try again.\"\n    },\n    \"stat\": \"OK\"\n}"
						}
					]
				},
				{
					"name": "Send user a batch of passcodes via SMS",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "postman_test_user",
									"description": "[Required]: Name of user to authenticate.",
									"type": "text"
								},
								{
									"key": "factor",
									"value": "sms",
									"description": "[Required]: sms indicates that a batch of passcodes should be sent to the user device",
									"type": "text"
								},
								{
									"key": "device",
									"value": "auto",
									"description": "[Required]: Device ID or 'auto' to select the first device associated with the user capable of receiving SMS",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/auth",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"auth"
							]
						},
						"description": "Send a user a batch of mobile passcode via SMS"
					},
					"response": [
						{
							"name": "Send user a batch of passcodes via SMS no device failure example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "postman_test_user",
											"description": "[Required]: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "sms",
											"description": "[Required]: sms indicates that a batch of passcodes should be sent to the user device",
											"type": "text"
										},
										{
											"key": "device",
											"value": "auto",
											"description": "[Required]: Device ID or 'auto' to select the first device associated with the user capable of receiving SMS",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 14:43:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "111"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 40002,\n    \"message\": \"Invalid request parameters\",\n    \"message_detail\": \"no capable device\",\n    \"stat\": \"FAIL\"\n}"
						},
						{
							"name": "Send user a batch of passcodes via SMS success result example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "postman_test_user",
											"description": "[Required]: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "sms",
											"description": "[Required]: sms indicates that a batch of passcodes should be sent to the user device",
											"type": "text"
										},
										{
											"key": "device",
											"value": "auto",
											"description": "[Required]: Device ID or 'auto' to select the first device associated with the user capable of receiving SMS",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 14:48:24 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "105"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"result\": \"deny\",\n        \"status\": \"sent\",\n        \"status_msg\": \"New SMS passcodes sent.\"\n    },\n    \"stat\": \"OK\"\n}"
						}
					]
				}
			],
			"description": "Group of examples for performing user authentication. These Duo API endpoints used in these examples are synchronous. Each request is intended to either respond directly with a result or timeout."
		},
		{
			"name": "Asynchronous User Authentication",
			"item": [
				{
					"name": "Pre-auth user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_id",
									"value": "",
									"description": "[Required] If 'username' not given",
									"type": "text",
									"disabled": true
								},
								{
									"key": "username",
									"value": "postman_test_user",
									"description": "[Required] If 'user_id' not given",
									"type": "text"
								},
								{
									"key": "ipaddr",
									"value": "",
									"description": "[Optional] IP address to include in the preauth request",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hostname",
									"value": "",
									"description": "[Optional] Hostname to include in the preauth request",
									"type": "text",
									"disabled": true
								},
								{
									"key": "trusted_device_token",
									"value": "",
									"description": "[Optional] If the trusted_device_token is present and the Auth API application has an effective policy that enables Remembered Devices for each browser-based application, return an \"allow\" response for the lifetime of the token as set by the Duo administrator in the policy.",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/preauth",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"preauth"
							]
						},
						"description": "The **/preauth** endpoint is used to determine if a user is enrolled in Duo and allowed to authenticate via the Duo Auth API integration. If successful, it will return a list of the available MFA factors/devices that may be used in the user authentication action via the **/auth** endpoint."
					},
					"response": [
						{
							"name": "Pre-auth user successful result example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user_id",
											"value": "",
											"description": "[Required] If 'username' not given",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "postman_test_user",
											"description": "[Required] If 'user_id' not given",
											"type": "text"
										},
										{
											"key": "ipaddr",
											"value": "",
											"description": "[Optional] IP address to include in the preauth request",
											"type": "text",
											"disabled": true
										},
										{
											"key": "hostname",
											"value": "",
											"description": "[Optional] Hostname to include in the preauth request",
											"type": "text",
											"disabled": true
										},
										{
											"key": "trusted_device_token",
											"value": "",
											"description": "[Optional] If the trusted_device_token is present and the Auth API application has an effective policy that enables Remembered Devices for each browser-based application, return an \"allow\" response for the lifetime of the token as set by the Duo administrator in the policy.",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https:///auth/v2/preauth",
									"protocol": "https",
									"path": [
										"auth",
										"v2",
										"preauth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 14:56:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "491"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"devices\": [\n            {\n                \"capabilities\": [\n                    \"auto\",\n                    \"push\",\n                    \"mobile_otp\"\n                ],\n                \"device\": \"DPUVFU8PQY7KB3W4R2NQ\",\n                \"display_name\": \"iOS\",\n                \"name\": \"\",\n                \"number\": \"\",\n                \"type\": \"phone\"\n            },\n            {\n                \"capabilities\": [\n                    \"auto\",\n                    \"push\",\n                    \"sms\",\n                    \"phone\",\n                    \"mobile_otp\"\n                ],\n                \"device\": \"DP80Z4GVU82OT8O1BNJF\",\n                \"display_name\": \"Marx iPhone 13_new (XXX-XXX-4788)\",\n                \"name\": \"Marx iPhone 13_new\",\n                \"number\": \"XXX-XXX-4788\",\n                \"sms_nextcode\": \"1\",\n                \"type\": \"phone\"\n            }\n        ],\n        \"result\": \"auth\",\n        \"status_msg\": \"Account is active\"\n    },\n    \"stat\": \"OK\"\n}"
						}
					]
				},
				{
					"name": "Async Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Transaction ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response.txid).to.exist.and.to.have.lengthOf.at.least(1, \"Transaction ID should not be empty\");",
									"",
									"    pm.collectionVariables.set(\"txid\", responseData.response.txid);",
									"    console.log(\"Transaction ID: \", responseData.response.txid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "",
									"description": "Required: Name of user to authenticate.",
									"type": "text"
								},
								{
									"key": "factor",
									"value": "auto",
									"description": "Reqquired: Type of MFA used to authenticate the user. The options are 'auto', 'push', 'passcode', 'sms', phone'. The options are also limited to the types of MFA devices enrolled for a user. The available options are returned from the 'pre_auth' API endpoint.",
									"type": "text"
								},
								{
									"key": "device",
									"value": "auto",
									"type": "text"
								},
								{
									"key": "ipaddr",
									"value": "",
									"description": "Optional: IP address of user",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hostname",
									"value": "",
									"description": "Optional: Name of device accessing the application",
									"type": "text",
									"disabled": true
								},
								{
									"key": "async",
									"value": "1",
									"description": "Optional: If set to '1' the response will be a transaction ID (TXID). The TXID is submitted to the auth_status API endpoint to determine the authentication result.\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/auth/v2/auth",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"auth"
							]
						}
					},
					"response": [
						{
							"name": "Async Authenticate User success example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "mark@duomark.net",
											"description": "[Required]: Name of user to authenticate.",
											"type": "text"
										},
										{
											"key": "factor",
											"value": "auto",
											"description": "[Required]: Type of MFA used to authenticate the user. The options are 'auto', 'push', 'passcode', 'sms', phone'. The options are also limited to the types of MFA devices enrolled for a user. The available options are returned from the 'pre_auth' API endpoint.",
											"type": "text"
										},
										{
											"key": "device",
											"value": "auto",
											"description": "[Required]: Device ID of enrolled MFA factor assigned to user. The available list of devices is returned from the call to the /preauth API endpoint",
											"type": "text"
										},
										{
											"key": "ipaddr",
											"value": "",
											"description": "Optional: IP address of user",
											"type": "text",
											"disabled": true
										},
										{
											"key": "hostname",
											"value": "",
											"description": "Optional: Name of device accessing the application",
											"type": "text",
											"disabled": true
										},
										{
											"key": "async",
											"value": "1",
											"description": "Optional: If set to '1' the response will be a transaction ID (TXID). The TXID is submitted to the auth_status API endpoint to determine the authentication result.\n",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https:///auth/v2/auth",
									"protocol": "https",
									"path": [
										"auth",
										"v2",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:48:18 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "76"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"txid\": \"13eb97f2-9008-42f4-b59b-afc7a5edf6a6\"\n    },\n    \"stat\": \"OK\"\n}"
						}
					]
				},
				{
					"name": "Get Async Auth Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/auth/v2/auth_status?txid={{txid}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"auth",
								"v2",
								"auth_status"
							],
							"query": [
								{
									"key": "txid",
									"value": "{{txid}}",
									"description": "[REQUIRED] Transaction ID returned from the async auth user call"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Async Auth Status example success response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https:///auth/v2/auth_status?txid=",
									"protocol": "https",
									"path": [
										"auth",
										"v2",
										"auth_status"
									],
									"query": [
										{
											"key": "txid",
											"value": "",
											"description": "[REQUIRED] Transaction ID returned from the async auth user call"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:48:41 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "133"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Etag",
									"value": "\"79281c077e3c7992d3797aded187426afb5c4210\""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"auth_delayed\": false,\n        \"result\": \"allow\",\n        \"status\": \"allow\",\n        \"status_msg\": \"Success. Logging you in...\"\n    },\n    \"stat\": \"OK\"\n}"
						},
						{
							"name": "Get Async Auth Status example waiting response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth_status?txid={{txid}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth_status"
									],
									"query": [
										{
											"key": "txid",
											"value": "{{txid}}",
											"description": "[REQUIRED] Transaction ID returned from the async auth user call"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:49:19 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "150"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Etag",
									"value": "\"20adbf87bae139570b47d768d1f368bcd0e31166\""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"auth_delayed\": false,\n        \"result\": \"waiting\",\n        \"status\": \"pushed\",\n        \"status_msg\": \"Pushed a login request to your device...\"\n    },\n    \"stat\": \"OK\"\n}"
						},
						{
							"name": "Get Async Auth Status example timeout result",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/auth/v2/auth_status?txid={{txid}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"auth",
										"v2",
										"auth_status"
									],
									"query": [
										{
											"key": "txid",
											"value": "{{txid}}",
											"description": "[REQUIRED] Transaction ID returned from the async auth user call"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Duo/1.0"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Mar 2024 12:50:57 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "124"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Etag",
									"value": "\"c6b5e73ed5e8cc61d3370ba8941899631643eaf0\""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self'; frame-src 'self' ; img-src 'self'  ; connect-src 'self'"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"auth_delayed\": false,\n        \"result\": \"deny\",\n        \"status\": \"timeout\",\n        \"status_msg\": \"Login timed out.\"\n    },\n    \"stat\": \"OK\"\n}"
						}
					]
				}
			],
			"description": "Group of examples for asynchronous user authentication. The usage model is to initiate an authentication event and then come back to check the result of that event at a later time rather than block on the authentication call until a response or timeout occurs."
		},
		{
			"name": "Get Logo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "https://{{apihost}}/auth/v2/logo",
					"protocol": "https",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"auth",
						"v2",
						"logo"
					]
				},
				"description": "Retrieve the logo currently assigned to the account"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Duo API Postman Pre-Request script v3.2.0",
					"// Last updated 2025-02-21 by: Mark Tripod",
					"",
					"var URL = require('url');",
					"var cryptojs = require('crypto-js');",
					"var btoa = require('btoa');",
					"",
					"function writeHeader(text) {",
					"    var breakStr = '============================================================================';",
					"    var fullWidth = breakStr.length;",
					"    var padding = (fullWidth - text.length) / 2;",
					"    var paddingString = ' '.repeat(padding);",
					"    var msgStr = paddingString + text + paddingString;",
					"    console.log(breakStr);",
					"    console.log(msgStr);",
					"    console.log(breakStr);",
					"}",
					"",
					"function replacePathVars() {",
					"    console.log(' *** Entering replacePathVars() ***');",
					"    var pathIndex = 0;",
					"    pm.request.url.path.forEach( function(element) {",
					"        if (element.includes('{{')) {",
					"            console.log(`    Variable ${element} found in request URL`);",
					"            var tmpElement = element.replace('{{', '').replace('}}', '');",
					"            console.log(`    Looking for value assigned to ${tmpElement}`);",
					"            var newElement = getVar(tmpElement);",
					"            pm.request.url.path[pathIndex] = newElement;",
					"            console.log(`    path element ${pathIndex} is now ${pm.request.url.path[pathIndex]}`);",
					"        }",
					"        pathIndex += 1;",
					"    });",
					"}",
					"",
					"function replaceQueryVars() {",
					"    console.log(' *** Entering replaceQueryVars() ***');",
					"    for(var i = 0; i < pm.request.url.query.count(); i++) {",
					"        console.log('.  Query string key: ', pm.request.url.query.idx(i).key);",
					"        if (pm.request.url.query.idx(i).disabled == true) {",
					"            console.log('.   Skipping disabled query string parameter', pm.request.url.query.idx(i).key);",
					"            continue;",
					"        }",
					"        if (pm.request.url.query.idx(i).key.includes('{{')) {",
					"            pm.request.url.query.idx(i).key = pm.variables.replaceIn(pm.request.url.query.idx(i).key);",
					"            console.log('.  New key: ', pm.request.url.query.idx(i).key);",
					"        }",
					"        console.log('.  Query string value: ', pm.request.url.query.idx(i).value);",
					"        if (pm.request.url.query.idx(i).value.includes('{{')) {",
					"            pm.request.url.query.idx(i).value = pm.variables.replaceIn(pm.request.url.query.idx(i).value);",
					"            console.log('.  New value: ', pm.request.url.query.idx(i).value);",
					"        }",
					"    }",
					"}",
					"",
					"function replaceBodyVars() {",
					"    console.log('  *** Entering replaceBodyVars() ***');",
					"    pm.request.body.formdata.each.apply(function (bodyElement) {",
					"        console.log(bodyElement);",
					"    });",
					"}",
					"",
					"function getVar(varName) {",
					"    var tmpVar = pm.variables.get(varName);",
					"    if (!tmpVar) {",
					"        console.log(`WARNING: ${varName} variable is missing or invalid.`);",
					"        throw new Error('Please ensure that the ikey, skey, and apihost entries are defined with proper values in either the Postman Environment or Collection variables.');",
					"    } else {",
					"        console.log(`  ===> ${varName} value found.`);",
					"    }",
					"    return tmpVar;",
					"}",
					"",
					"/**",
					" * @param {pm.request.method} httpMethod - The pm.request.method property",
					" * @param {pm.request.body} requestBody - The pm.request.body property",
					" */",
					"function getAuthHeader(httpMethod, hostname, path, q_str, requestBody, duo_auth_ver) {",
					"    writeHeader('Calculating Duo Authentication header');",
					"",
					"    console.log('Method: ', httpMethod);",
					"    console.log('hostname: ', hostname);",
					"    console.log('Path: ', path);",
					"    console.log('Query string: ', q_str);",
					"    console.log('POST body: ', requestBody);",
					"    console.log('Duo Auth Version: ', duo_auth_ver);",
					"",
					"    writeHeader('Retrieving Required Duo API Information');",
					"",
					"    var IKEY = getVar('ikey');",
					"    var SKEY = getVar('skey');",
					"    var APIHOST = getVar('apihost');",
					"",
					"    console.log('   ikey: ', IKEY);",
					"    console.log('   skey: ************************************');",
					"    console.log('   apihost: ', APIHOST);",
					"",
					"    api_call = path;",
					"    console.log('.   api_call: ', api_call);",
					"",
					"    var AUTH_TYPE;",
					"    var hmacDigest;",
					"    var post_or_put = [\"POST\", \"PUT\"]",
					"",
					"    writeHeader('Calculating Timestamp Header Value');",
					"",
					"    //The current time, formatted as RFC 2822. This must be the same string as the \"Date\" header (or X-Duo-Date header).",
					"    // TODO: explore other options besides the 'moment' module since it is so large and no longer being developed.",
					"    var moment = require('moment');",
					"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
					"    pm.variables.set(\"timestampHeader\", timestamp);",
					"    console.log('timestamp header value: ', timestamp);",
					"",
					"    writeHeader('Calculating Duo Authentication Header Value');",
					"",
					"    switch (duo_auth_ver) {",
					"        case 'v2':",
					"            console.log('API request is for a v1 endpoint. Using HMAC-SHA1 based canonical v2 authentication header.');",
					"            AUTH_TYPE = 'HMAC-SHA1';",
					"            var body_length = Object.keys(requestBody).length;",
					"            var params_unsorted = \"\";",
					"            var params_array = [];",
					"",
					"            console.log('requestBody: ', requestBody);",
					"",
					"            //Create unsorted array of parameters from either URL or Body",
					"            //Assuming POST parameters are in the Body, GET paramters are in URL",
					"            //(technically it looks like POST can be in the URL as well)",
					"            if (post_or_put.includes(httpMethod) && requestBody.mode == 'formdata') {",
					"                console.log('Processing form data for POST request ...');",
					"                requestBody.formdata.each(function (parameter1) {",
					"                    if (! parameter1.disabled) {",
					"                        params_unsorted = parameter1.key + \"=\" + parameter1.value;",
					"                        params_array.push(params_unsorted);",
					"                    }",
					"                });",
					"            }",
					"",
					"            console.log('params_unsorted before split: ', params_unsorted);",
					"            if (q_str) {",
					"                console.log('Processing query string parameters ...');",
					"                params_array = q_str.split(\"&\");",
					"                console.log('params_array after split: ', params_array);",
					"            }",
					"            ",
					"            console.log('params_array: ', params_array);",
					"            params_array.sort();                    //lexicographically sort parameters by key",
					"            var encoded_params = \"\";               ",
					"            if (params_array[0] !== \"\"){            //check if there are any Params to encode and create the string from",
					"                var encoded_params_array = params_array.map(urlEncodeParams);   //create URL-encoded array of key=value pairs from the sorted array",
					"                encoded_params = encoded_params_array.join(\"&\");                //create string of parameters joined by &",
					"            }",
					"            console.log('encoded params: ', encoded_params);",
					"            //Then concatenate these components with (line feed) newlines",
					"            var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+hostname+\"\\n\"+api_call+\"\\n\"+encoded_params;",
					"            console.log('requesstData: ', requestData);",
					"            //compute the HMAC-SHA1 of this canonical representation, using your Duo application's secret key as the HMAC key",
					"            hmacDigest = cryptojs.HmacSHA1(requestData, SKEY);",
					"            console.log('hmacDigest: ', hmacDigest);",
					"            pm.request.headers.add({key: 'Content-Type', value: 'application/x-www-form-urlencoded' });",
					"            break;",
					"        case 'v5':",
					"            console.log('API request is for a v2 endpoint. Using HMAC-SHA512 based canonical v5 authentication header.');",
					"            AUTH_TYPE = 'HMAC-SHA512';",
					"            var body_length = Object.keys(requestBody).length;",
					"            var encoded_params = \"\";  ",
					"            var requestData = \"\";",
					"            ",
					"            console.log('Body length: ', body_length)",
					"",
					"            if (post_or_put.includes(httpMethod) && body_length != 0) {  ",
					"                var jsonData = JSON.parse(pm.request.body.toJSON().raw);",
					"                jsonData = JSON.stringify(jsonData);",
					"                encoded_params = jsonData;",
					"                console.log('encoded_params: ', encoded_params);",
					"                requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+hostname+\"\\n\"+api_call+\"\\n\"+ \"\" +\"\\n\"+cryptojs.SHA512(encoded_params)+\"\\n\"+cryptojs.SHA512(\"\");",
					"                pm.request.body = jsonData;",
					"            }",
					"            else {",
					"                params_unsorted = q_str;",
					"                console.log('Unsorted parameters length: ', params_unsorted.length)",
					"                if (params_unsorted.length > 0) {",
					"                    params_array = params_unsorted.split(\"&\");",
					"                    params_array.sort(); ",
					"                    encoded_params_array = params_array.map(urlEncodeParams);   //create URL-encoded array of key=value pairs from the sorted array",
					"                    encoded_params = encoded_params_array.join(\"&\");  ",
					"                }",
					"                requestData = timestamp+\"\\n\"+httpMethod+\"\\n\"+hostname+\"\\n\"+api_call+\"\\n\"+encoded_params+\"\\n\"+cryptojs.SHA512(\"\")+\"\\n\"+cryptojs.SHA512(\"\");",
					"            }",
					"             //compute the HMAC-SHA512 of this canonical representation, using your Duo application's secret key as the HMAC key",
					"            hmacDigest = cryptojs.HmacSHA512(requestData, SKEY);",
					"            pm.request.headers.add({key: 'Content-Type', value: 'application/json' });",
					"            break;",
					"    }",
					"          ",
					"    //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC signature as the password.",
					"    var prebase = IKEY+\":\"+ hmacDigest;",
					"    console.log('prebase: ', prebase);",
					"     ",
					"    //encodes a string in base-64",
					"    var baseComplete = btoa(prebase);",
					"    console.log('baseComplete: ', baseComplete);",
					" ",
					"    var authHeader = \"Basic \"+ baseComplete;",
					"    console.log('hmacauthheader: ', authHeader);",
					"    return authHeader;",
					"}",
					"",
					" ",
					"function urlEncodeParams(value, index, array) {",
					"    //split the Key and Value at the first \"=\", URL-encode the Value, and rejoin them with an \"=\"",
					"    //If the separator in the split() is a regular expression that contains capturing parentheses (), matched results are included in the array",
					"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
					"}",
					"",
					"// Begin script execution",
					"writeHeader('Begin Creation of Duo API Authentication Headers');",
					"",
					"console.log('PM request object: ', pm.request);",
					"console.log('PM request host: ', pm.request.url.host);",
					"console.log('Request data: ', pm.request.data);",
					"",
					"var duo_auth_ver;",
					"let req_url = pm.request.url.getPath();",
					"console.log('Request URL: ', req_url);",
					"",
					"if (pm.request.url.query && pm.request.url.query.count() > 0) {",
					"    console.log('Request has a query string defined. Checking for any variable definitions...');",
					"    replaceQueryVars();",
					"} else {",
					"    console.log('Request has no query string.');",
					"}",
					"",
					"var q_str = pm.request.url.getQueryString();",
					"console.log('PM parsed query string: ', q_str);",
					"var pmQueryStringElements = pm.request.url.query.toObject();",
					"console.log('PM query string object: ', pmQueryStringElements);",
					"",
					"console.log('Query string: ', q_str);",
					"if (!q_str) {",
					"    q_str = \"\";",
					"}",
					"console.log('q_str length: ', q_str.length);",
					"var path = pm.request.url.path;",
					"console.log('postman request path object: ', path);",
					"console.log('Replacing any variables that may be in the path.')",
					"replacePathVars();",
					"path = path.join('/');",
					"path = '/' + path;",
					"console.log('Path string: ', path.toString());",
					"",
					"if (req_url.includes('/v1/') || req_url.includes('/auth/v2/')) {",
					"    duo_auth_ver = 'v2'; ",
					"} else {",
					"    duo_auth_ver = 'v5'; ",
					"}",
					"",
					"// Override the Duo Authorization version for newer bulk action and v3 endpoints",
					"if (req_url.includes('bulk') || req_url.includes('/skey') || req_url.includes('/v3/')) {",
					"    duo_auth_ver = 'v5';",
					"}",
					"",
					"",
					"console.log('Duo Canonical Authentication Version:', duo_auth_ver);",
					"",
					"if (pm.request.url.host[0] == '{{apihost}}') {",
					"    console.log('Request URL contains {{apihost}} variable. Checking if that value is defined in the Postman Environment.');",
					"    var hostname = getVar('apihost');",
					"    pm.request.url.host[0] = hostname;",
					"}",
					"",
					"pm.variables.set(\"hmacAuthHeader\", getAuthHeader(pm.request.method, pm.request.url.host[0], path, q_str, pm.request.body, duo_auth_ver));",
					"",
					"pm.request.headers.add({key: 'Date', value: pm.variables.get(\"timestampHeader\")});",
					"pm.request.headers.add({key: 'Authorization', value: pm.variables.get(\"hmacAuthHeader\")});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "txid",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "activation_code",
			"value": "",
			"type": "string"
		}
	]
}