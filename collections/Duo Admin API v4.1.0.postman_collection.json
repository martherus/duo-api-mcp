{
	"info": {
		"_postman_id": "b6c5618e-92be-4372-89c2-4bdf04453dc5",
		"name": "Duo Admin API",
		"description": "[https://duo.com/docs/adminapi](https://duo.com/docs/adminapi)\n\nThis collection contains a goup of examples for each of the major currently available API endpoints within the Duo Admin API. In some cases (like the bulk action endpoints) example payloads for the POST requests have been provided.\n\n##### API Authentication\n\n> This Collection includes a `pre-request` script that is responsible for handling the per request requirement to include a dynamically generated HTTP `Authorization` header. \n  \n\n##### Troubleshooting\n\n> The `pre-request` script also includes logging capabilties to help in troubleshooting any request failures. Those logging messages are output to the Postman console. \n  \n\n##### Requirements\n\n> The `pre-request` script relies on the availability of the Duo Auth API application integration details from the Duo Admin Panel. These details are the Integration key (`ikey`), Secret key (`skey`), API hostname (`host`). The values for each of these should be stored in a Postman Environment variables (`ikey`, `skey`, and `apihost` respectively) where this Collection will be executed, or within this Collection variables table.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12279134"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Retrieve Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "",
									"description": "Optional: Specify a user name (or username alias) to look up a single user.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 300",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate response structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.stat).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"The response object should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response).to.exist.and.not.to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'username' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that 'is_enrolled' field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response.is_enrolled).to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    const username = responseData.response.username;",
									"    console.log(`User ${username} created successfully.`);",
									"    pm.environment.set(\"user_id\", responseData.response.user_id);",
									"    console.log(\"'user_id' environment variable set to: \", pm.environment.get(\"user_id\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users?username={{username}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}",
									"description": "Required: The name of the user to create."
								},
								{
									"key": "aliases",
									"value": "",
									"description": "Optional: Username aliases for the user. Up to eight aliases may be specified with this parameter as a set of URL-encoded key-value pairs e.g. alias1=joe.smith&alias2=jsmith@example.com. Ignores alias position values not specified. Aliases must be unique amongst users. Mutually exclusive with alias1...4.",
									"disabled": true
								},
								{
									"key": "realname",
									"value": "",
									"description": "Optional: The real name (or full name) of this user.",
									"disabled": true
								},
								{
									"key": "email",
									"value": "",
									"description": "Optional: The email address of this user.",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Optional: he user’s status. One of:\n\n“active” - The user must complete secondary authentication. This is the default value if no status is specified.\n\n“bypass” - The user will bypass secondary authentication after completing primary authentication.\n\n“disabled” - The user will not be able to complete secondary authentication.",
									"disabled": true
								},
								{
									"key": "notes",
									"value": "",
									"description": "Optional: An optional description or notes field. Can be viewed in the Duo Admin Panel.",
									"disabled": true
								},
								{
									"key": "firstname",
									"value": "",
									"description": "Optional: The user's ginven name.",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "",
									"description": "Optional: The user's surname.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Add Users",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"users\": \"[{\\\"username\\\": \\\"example_username_11\\\", \\\"email\\\": \\\"example_user_11@example.com\\\"}, {\\\"username\\\": \\\"example_username_21\\\", \\\"status\\\": \\\"disabled\\\"}]\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/bulk_create",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"bulk_create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Restore Users from Trash",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id_list\": \"[\\\"DUBU8IH281UYD5SFEN76\\\", \\\"DUK5R85ME9S99RUU5RWC\\\", \\\"DUG18B2EYWR07QJAETLZ\\\"]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/bulk_restore",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"bulk_restore"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Multiple Users to Trash",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id_list\": \"[\\\"DUBU8IH281UYD5SFEN76\\\", \\\"DUK5R85ME9S99RUU5RWC\\\", \\\"DUG18B2EYWR07QJAETLZ\\\"]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/bulk_send_to_trash",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"bulk_send_to_trash"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}?realname=API Test User 1024&email=api_user_1024@mangled.net",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "username",
									"value": "",
									"description": "Optional: The new username.",
									"disabled": true
								},
								{
									"key": "aliases",
									"value": "",
									"description": "Optional: Username aliases for the user. Up to eight aliases may be specified with this parameter as a set of URL-encoded key-value pairs e.g. alias1=joe.smith&alias2=jsmith@example.com. Ignores alias position values not specified. Remove the value for an existing alias by specifying a blank value e.g. alias1=. Aliases must be unique amongst users. Mutually exclusive with alias1...4.",
									"disabled": true
								},
								{
									"key": "realname",
									"value": "API Test User 1024",
									"description": "Optional: The new real name (or full name)."
								},
								{
									"key": "email",
									"value": "api_user_1024@mangled.net",
									"description": "Optional: The new email address."
								},
								{
									"key": "status",
									"value": "",
									"description": "Optional: The new status. Must be one of “active”, “disabled”, or “bypass”. See Retrieve Users for an explanation of these fields.",
									"disabled": true
								},
								{
									"key": "notes",
									"value": "",
									"description": "Optional: The new notes field.",
									"disabled": true
								},
								{
									"key": "firstname",
									"value": "",
									"description": "Optional: The user's new given name.",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "",
									"description": "Optional: The user's new surname.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enroll User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/enroll?username={{username}}&email={{email}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"enroll"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}",
									"description": "Required: The user name (or username alias) of the user to enroll."
								},
								{
									"key": "email",
									"value": "{{email}}",
									"description": "Required: The email address of this user."
								},
								{
									"key": "valid_secs",
									"value": "",
									"description": "Optional: The number of seconds the enrollment code should be valid for. Default: 2592000 (30 days).",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Bypass Codes for User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/bypass_codes",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"bypass_codes"
							],
							"query": [
								{
									"key": "count",
									"value": null,
									"description": "Optional: Number of new bypass codes to create. At most 10 codes (the default) can be created at a time. Codes will be generated randomly.",
									"disabled": true
								},
								{
									"key": "codes",
									"value": null,
									"description": "Optional: CSV string of codes to use. Mutually exclusive with count.",
									"disabled": true
								},
								{
									"key": "reuse_count",
									"value": null,
									"description": "Optional: The number of times generated bypass codes can be used. If 0, the codes will have an infinite reuse_count. Default: 1.",
									"disabled": true
								},
								{
									"key": "valid_secs",
									"value": null,
									"description": "Optional: The number of seconds generated bypass codes should be valid for. If 0 (the default) the codes will never expire.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Bypass Codes by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/bypass_codes",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"bypass_codes"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Groups by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/groups",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"groups"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Group with User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/groups?group_id={{group_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"groups"
							],
							"query": [
								{
									"key": "group_id",
									"value": "{{group_id}}",
									"description": "Required: The ID of the group to associate with the user."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disassociate Group from User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/groups/{{group_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"groups",
								"{{group_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Phones by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/phones",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"phones"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Phone with User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/phones?phone_id={{phone_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"phones"
							],
							"query": [
								{
									"key": "phone_id",
									"value": "{{phone_id}}",
									"description": "Required: The ID of the phone to associate with the user."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disassociate Phone from User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/phones/{{phone_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"phones",
								"{{phone_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Hardware Tokens by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/tokens",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"tokens"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Hardware Token with User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/tokens?token_id={{token_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"tokens"
							],
							"query": [
								{
									"key": "token_id",
									"value": "{{token_id}}",
									"description": "Required: The ID of the hardware token to associate with the user."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disassocate Hardware Token from User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/tokens/{{token_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"tokens",
								"{{token_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve WebAuthn Credentials by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/webauthncredentials",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"webauthncredentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Desktop Authenticators by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/desktopauthenticators",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"desktopauthenticators"
							]
						}
					},
					"response": []
				},
				{
					"name": "Synchronize User from Directory",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/directorysync/{{directory_key}}/syncuser?username={{username}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"directorysync",
								"{{directory_key}}",
								"syncuser"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}",
									"description": "Required: The user to update via directory sync. This should be the same as the user's username in the source directory."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Verification Push",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate the response object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response).to.exist.and.to.be.an('object');",
									"});",
									"",
									"pm.test(\"Validate 'stat' response is 'OK\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    pm.environment.set(\"push_id\", responseData.response.push_id);",
									"    console.log(\"Push ID: \", responseData.response.push_id);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone_id\": \"DP80Z4GVU82OT8O1BNJF\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/send_verification_push",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"send_verification_push"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Verification Push Response",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/verification_push_response?push_id={{push_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"{{user_id}}",
								"verification_push_response"
							],
							"query": [
								{
									"key": "push_id",
									"value": "{{push_id}}",
									"description": "The ID of the Verified Push action returned from a Send Verification Push operation."
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#users"
		},
		{
			"name": "Bulk Operations",
			"item": [
				{
					"name": "Bulk User Operations",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operations\": [\n        {\n            \"method\": \"POST\",\n            \"path\": \"/admin/v1/users\",\n            \"body\": {\n                \"username\": \"New User 1\"\n            }\n        },\n        {\n            \"method\": \"POST\",\n            \"path\": \"/admin/v1/users\",\n            \"body\": {\n                \"username\": \"New User 2\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v1/bulk",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"bulk"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Groups",
			"item": [
				{
					"name": "Per-user Group Operations",
					"item": [
						{
							"name": "Retrieve Groups by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/groups",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}",
										"groups"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Group with User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/groups?group_id={{group_id}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}",
										"groups"
									],
									"query": [
										{
											"key": "group_id",
											"value": "{{group_id}}",
											"description": "Required: The ID of the group to associate with the user."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disassociate Group from User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/groups/{{group_id}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve Groups",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/groups",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"groups"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(globals.loadUtils);",
									"utils.writeHeader(\"Create group post request tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate response structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.stat).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"The response object should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response).to.exist.and.not.to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'name' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Group name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    const groupname = responseData.response.name;",
									"    console.log(`Group \"${groupname}\" created successfully.`);",
									"    pm.environment.set(\"group_id\", responseData.response.group_id);",
									"    console.log(\"'group_id' environment variable set to: \", pm.environment.get(\"group_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/groups?name={{group_name}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"groups"
							],
							"query": [
								{
									"key": "name",
									"value": "{{group_name}}",
									"description": "Required: The name of the group."
								},
								{
									"key": "desc",
									"value": "",
									"description": "Optional: The description of the group.",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Optional: The authentication status of the group. May be one of:\n\n“active” - The users in the group must complete secondary authentication.\n\n“bypass” - The users in the group will bypass secondary authentication after completing primary authentication.\n\n“disabled” - The users in the group will not be able to authenticate.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Group Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/groups/{{group_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"groups",
								"{{group_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Group Members",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/groups/{{group_id}}/users",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"groups",
								"{{group_id}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Group",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/groups/{{group_id}}?status=disabled",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"groups",
								"{{group_id}}"
							],
							"query": [
								{
									"key": "name",
									"value": "",
									"description": "Optional: Update the name of the group.",
									"disabled": true
								},
								{
									"key": "desc",
									"value": "",
									"description": "Optional: Update the description of the group.",
									"disabled": true
								},
								{
									"key": "status",
									"value": "disabled",
									"description": "Optional: The authentication status of the group. May be one of:\n\n“active” - The users in the group must complete secondary authentication.\n\n“bypass” - The users in the group will bypass secondary authentication after completing primary authentication.\n\n“disabled” - The users in the group will not be able to authenticate."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(globals.loadUtils);",
									"utils.writeHeader(\"Delete group post request tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - response and stat\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('response');",
									"    pm.expect(responseData).to.have.property('stat');",
									"});",
									"",
									"",
									"pm.test(\"The response field should be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    console.log(\"Group delete successfully.\");",
									"    pm.environment.unset(\"group_id\");",
									"    console.log(\"'group_id' environment variable has been unset.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/groups/{{group_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"groups",
								"{{group_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#groups"
		},
		{
			"name": "Phones",
			"item": [
				{
					"name": "Per-user Phone Operations",
					"item": [
						{
							"name": "Retrieve Phones by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/phones",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}",
										"phones"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Phone with User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/phones?phone_id={{phone_id}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}",
										"phones"
									],
									"query": [
										{
											"key": "phone_id",
											"value": "{{phone_id}}",
											"description": "Required: The ID of the phone to associate with the user."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disassociate Phone from User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/phones/{{phone_id}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}",
										"phones",
										"{{phone_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve Phones",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/phones",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"phones"
							],
							"query": [
								{
									"key": "number",
									"value": null,
									"description": "Optional: Specify a phone number to look up a single phone.",
									"disabled": true
								},
								{
									"key": "extension",
									"value": null,
									"description": "Optional: The extension, if necessary.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(pm.globals.loadUtils);",
									"utils.writeHeader(\"Create phone post request tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate response structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.stat).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"The response object should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response).to.exist.and.not.to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'phone_id' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response.phone_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"phone_id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    const phone_id = responseData.response.phone_id;",
									"    console.log(`Phone ${phone_id} created successfully.`);",
									"    pm.environment.set(\"phone_id\", responseData.response.phone_id);",
									"    console.log(\"'phone_id' environment variable set to: \", pm.environment.get(\"phone_id\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "number",
									"value": "+919844059516",
									"type": "text"
								},
								{
									"key": "name",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "extension",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "type",
									"value": "mobile",
									"type": "text"
								},
								{
									"key": "platform",
									"value": "generic smartphone",
									"type": "text"
								},
								{
									"key": "predelay",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "postdelay",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v1/phones",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Phone by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/phones/{{phone_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"{{phone_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Phone",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/phones/{{phone_id}}?type=mobile",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"{{phone_id}}"
							],
							"query": [
								{
									"key": "number",
									"value": "",
									"description": "Optional: The new number.",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"description": "Optional: Free-form label for the phone.",
									"disabled": true
								},
								{
									"key": "extension",
									"value": "",
									"description": "Optional: The new extension.",
									"disabled": true
								},
								{
									"key": "type",
									"value": "mobile",
									"description": "Optional: The type of phone. One of: “unknown”, “mobile”, or “landline”."
								},
								{
									"key": "platform",
									"value": "",
									"description": "Optional: The phone platform. One of: “unknown”, “google android”, “apple ios”, “windows phone 7”, “rim blackberry”, “java j2me”, “palm webos”, “symbian os”, “windows mobile”, or “generic smartphone”.\n“windows phone” is accepted as a synonym for “windows phone 7”. This includes devices running Windows Phone 8.\nIf a smartphone’s exact platform is unknown but it will have Duo Mobile installed, use “generic smartphone” and generate an activation code. When the phone is activated its platform will be automatically detected.",
									"disabled": true
								},
								{
									"key": "predelay",
									"value": "",
									"description": "Optional: The time (in seconds) to wait after the number picks up and before dialing the extension.",
									"disabled": true
								},
								{
									"key": "postdelay",
									"value": "",
									"description": "Optional: The time (in seconds) to wait after the extension is dialed and before the speaking the prompt.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(globals.loadUtils);",
									"utils.writeHeader(\"Delete phone post request tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - response and stat\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('response');",
									"    pm.expect(responseData).to.have.property('stat');",
									"});",
									"",
									"",
									"pm.test(\"The response field should be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    console.log(\"Phone delete successfully.\");",
									"    pm.environment.unset(\"phone_id\");",
									"    console.log(\"'phone_id' environment variable has been unset.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/phones/{{phone_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"{{phone_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Activation Code",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/phones/{{phone_id}}/activation_url",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"{{phone_id}}",
								"activation_url"
							],
							"query": [
								{
									"key": "valid_secs",
									"value": null,
									"description": "Optional: The number of seconds this activation code should be valid for. Default: 86400 (one day).",
									"disabled": true
								},
								{
									"key": "install",
									"value": null,
									"description": "Optional: “1” to also return an installation URL for Duo Mobile; “0” to not return. Default: “0”.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Activation Code via SMS",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/phones/{{phone_id}}/send_sms_activation",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"{{phone_id}}",
								"send_sms_activation"
							],
							"query": [
								{
									"key": "valid_secs",
									"value": null,
									"description": "Optional: The number of seconds this activation code should be valid for. Default: 86400 (one day).",
									"disabled": true
								},
								{
									"key": "install",
									"value": null,
									"description": "Optional: “1” to cause an installation SMS message to be sent before the activation message, “0” to not send an installation SMS message. Default: “0”.",
									"disabled": true
								},
								{
									"key": "installation_msg",
									"value": null,
									"description": "Optional: A custom installation message to send to the user. Only valid if installation was requested. Must contain the phrase “<insturl>”, which is replaced with the installation URL.",
									"disabled": true
								},
								{
									"key": "activation_msg",
									"value": null,
									"description": "Optional: A custom activation message to send to the user. Must contain “<acturl>”, which is replaced with the activation URL.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Installation URL via SMS",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/phones/{{phone_id}}/send_sms_installation",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"{{phone_id}}",
								"send_sms_installation"
							],
							"query": [
								{
									"key": "installation_msg",
									"value": null,
									"description": "Optional: A custom installation message to send to the user. Must contain the phrase “<insturl>”, which is replaced with the installation URL.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Passcodes via SMS",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/phones/{{phone_id}}/send_sms_passcodes",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"{{phone_id}}",
								"send_sms_passcodes"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#phones"
		},
		{
			"name": "Tokens",
			"item": [
				{
					"name": "Retrieve Hardware Tokens",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/tokens",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens"
							],
							"query": [
								{
									"key": "type",
									"value": null,
									"description": "Optional: Specify a type and serial number to look up a single hardware token. One of:\n\n“h6” - HOTP-6 hardware token\n“h8” - HOTP-8 hardware token\n“yk” - YubiKey AES hardware token\n“d1” - Duo-D100 hardware token\nf\n* This option is required if serial is present.",
									"disabled": true
								},
								{
									"key": "serial",
									"value": null,
									"description": "Optional: The serial number of the hardware token.\n\n* This option is required if type is present.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hardware Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('response').that.is.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    const token_id = responseData.response.token_id;",
									"    console.log(`Token ${token_id} created successfully.`);",
									"    pm.environment.set(\"token_id\", responseData.response.token_id);",
									"    console.log(\"'token_id' environment variable set to: \", pm.environment.get(\"token_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/tokens?type=&serial=",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens"
							],
							"query": [
								{
									"key": "type",
									"value": "",
									"description": "Required: The type of hardware token to import. One of:\n\n“h6” - HOTP-6 hardware token\n“h8” - HOTP-8 hardware token\n“yk” - YubiKey AES hardware token\n\nDuo-D100 tokens (type \"d1\") are imported when purchased from Duo and may not be created via the Admin API."
								},
								{
									"key": "serial",
									"value": "",
									"description": "Required: The serial number of the token (maximum length 128 characters)."
								},
								{
									"key": "secret",
									"value": "",
									"description": "Optional: The HOTP secret. This parameter is required for HOTP-6 and HOTP-8 hardware tokens.",
									"disabled": true
								},
								{
									"key": "counter",
									"value": "",
									"description": "Optional: Initial value for the HOTP counter. Default: 0. This parameter is only valid for HOTP-6 and HOTP-8 hardware tokens.",
									"disabled": true
								},
								{
									"key": "private_id",
									"value": "",
									"description": "Optional: The YubiKey private ID. This parameter is required for YubiKey hardware tokens.",
									"disabled": true
								},
								{
									"key": "aes_key",
									"value": "",
									"description": "Optional: The YubiKey AES key. This parameter is required for YubiKey hardware tokens.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Hardware Token by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/tokens/{{token_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens",
								"{{token_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resync Hardware Token",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/tokens/{{token_id}}/resync?code1={{token_code1}}&code2={{token_code2}}&code3={{token_code3}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens",
								"{{token_id}}",
								"resync"
							],
							"query": [
								{
									"key": "code1",
									"value": "{{token_code1}}",
									"description": "Required: The first code from the token."
								},
								{
									"key": "code2",
									"value": "{{token_code2}}",
									"description": "Required: The second code from the token."
								},
								{
									"key": "code3",
									"value": "{{token_code3}}",
									"description": "Required: The third code from the token."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Hardware Token",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/tokens/{{token_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens",
								"{{token_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#tokens"
		},
		{
			"name": "WebAuthn Credentials",
			"item": [
				{
					"name": "Per-user WebAuthn Credential Operations",
					"item": [
						{
							"name": "Retrieve WebAuthn Credentials by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/users/[user_id]/webauthncredentials",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"webauthncredentials"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve WebAuthn Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(globals.loadUtils);",
									"utils.writeHeader(\"Retrieve webauthn credentials post request tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate metadata object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.metadata).to.exist.and.to.be.an('object');",
									"});",
									"",
									"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    const count = responseData.metadata.total_objects;",
									"    if (count > 0) {",
									"        console.log(`${count} webauthn credentials retrieved successfully.`);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/webauthncredentials",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"webauthncredentials"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve WebAuthn Credentials by Key",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}/admin/v1/webauthncredentials/[webauthnkey]",
							"protocol": "https",
							"host": [
								"{{apihost}"
							],
							"path": [
								"admin",
								"v1",
								"webauthncredentials",
								"[webauthnkey]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete WebAuthn Credential",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}/admin/v1/webauthncredentials/[webauthnkey]",
							"protocol": "https",
							"host": [
								"{{apihost}"
							],
							"path": [
								"admin",
								"v1",
								"webauthncredentials",
								"[webauthnkey]"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#webauthn-credentials"
		},
		{
			"name": "Desktop Authenticators",
			"item": [
				{
					"name": "Shared Device Authentication",
					"item": [
						{
							"name": "Retrieve Shared Device Authentication Configurations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/desktop_authenticators/shared_device_auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"desktop_authenticators",
										"shared_device_auth"
									],
									"query": [
										{
											"key": "limit",
											"value": "10",
											"description": "The maximum number of records returned.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"description": "The offset from 0 at which to start record retrieval.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Shared Device Authentication Configuration by Key",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/desktop_authenticators/shared_device_auth/{{shared_device_key}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"desktop_authenticators",
										"shared_device_auth",
										"{{shared_device_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Shared Device Authentication Configuration",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group_id_list\": [\"group_id_1\", \"group_id_2\"],\n    \"trusted_endpoint_integration_id_list\": [\"trusted_endpoint_integration_id_1\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/admin/v1/desktop_authenticators/shared_device_auth",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"desktop_authenticators",
										"shared_device_auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Shared Device Authentication Configuration",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"active\": 1,\n    \"group_id_list\": \"[\\\"{{group_id_1}}\\\", \\\"{{group_id_2}}\\\"]\",\n    \"name\": \"{{new_name}}\",\n    \"trusted_endpoint_integration_id_list\": \"[\\\"{{trusted_endpoint_integration_id_1}}\\\"]\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/admin/v1/desktop_authenticators/shared_device_auth/{{shared_device_key}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"desktop_authenticators",
										"shared_device_auth",
										"{{shared_device_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Shared Device Authentication Configuration Copy",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/desktop_authenticators/shared_device_auth/{{shared_device_key}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"desktop_authenticators",
										"shared_device_auth",
										"{{shared_device_key}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve Desktop Authenticators",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/desktop_authenticators",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"desktop_authenticators"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"description": "The maximum number of records returned.",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "The offset from 0 at which to start record retrieval.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Desktop Authenticator by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/desktop_authenticators/{{dakey}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"desktop_authenticators",
								"{{dakey}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Desktop Authenticator",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/desktop_authenticators/{{dakey}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"desktop_authenticators",
								"{{dakey}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bypass Codes",
			"item": [
				{
					"name": "Per-user Bypass Code Operations",
					"item": [
						{
							"name": "Create Bypass Codes for User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - response and stat\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.response).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.stat).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"The response array should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.response).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"The 'stat' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.stat).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/users/{{user_id}}/bypass_codes",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"{{user_id}}",
										"bypass_codes"
									],
									"query": [
										{
											"key": "count",
											"value": null,
											"description": "Optional: Number of new bypass codes to create. At most 10 codes (the default) can be created at a time. Codes will be generated randomly.",
											"disabled": true
										},
										{
											"key": "codes",
											"value": null,
											"description": "Optional: CSV string of codes to use. Mutually exclusive with count.",
											"disabled": true
										},
										{
											"key": "reuse_count",
											"value": null,
											"description": "Optional: The number of times generated bypass codes can be used. If 0, the codes will have an infinite reuse_count. Default: 1.",
											"disabled": true
										},
										{
											"key": "valid_secs",
											"value": null,
											"description": "Optional: The number of seconds generated bypass codes should be valid for. If 0 (the default) the codes will never expire.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Bypass Codes by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/users/[user_id]/bypass_codes",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"bypass_codes"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrive Bypass Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(globals.loadUtils);",
									"utils.writeHeader(\"Retrieve bypass codes post request tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    const count = responseData.metadata.total_objects;",
									"    console.log(`${count} bypass codes retrieved successfully.`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/bypass_codes",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"bypass_codes"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Bypass Codes by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(globals.loadUtils);",
									"utils.writeHeader(\"Retrieve bypass code by ID post request tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    console.log(\"Bypass code retrieved successfully.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/bypass_codes/{{bypass_code_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"bypass_codes",
								"{{bypass_code_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bypass Code",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/bypass_codes/[bypass_code_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"bypass_codes",
								"[bypass_code_id]"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#bypass-codes"
		},
		{
			"name": "Integrations",
			"item": [
				{
					"name": "Create generic SSO integration",
					"item": [
						{
							"name": "Create SSO Integration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the response object\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.response).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Validate adminapi_admins field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.response.adminapi_admins).to.be.a('number');",
											"    pm.expect(responseData.response.adminapi_admins).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Validate adminapi_info field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.response.adminapi_info).to.be.a('number').and.to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"The adminapi_integrations field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.response.adminapi_integrations).to.be.a('number').and.to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Validate 'stat' response is 'OK\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.stat).is.equal('OK');",
											"    pm.environment.set(\"integration_key\", responseData.response.integration_key);",
											"    console.log(\"New integration key: \", responseData.response.integration_key);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test SSO Integration via API\",\n    \"type\": \"sso-generic\",\n    \"sso\": {\n            \"saml_config\": {\n            \"entity_id\": \"entity_id\",\n            \"acs_urls\": [\n                {\n                    \"url\": \"https://example.com/acs\",\n                    \"isDefault\": \"True\"\n                }\n            ],\n            \"nameid_format\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\",\n            \"nameid_attribute\": \"mail\",\n            \"sign_assertion\": \"False\",\n            \"sign_response\": \"True\",\n            \"signing_algorithm\": \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\",\n            \"mapped_attrs\": {},\n            \"relaystate\": \"https://example.com/relaystate\",\n            \"slo_url\": \"https://example.com/slo\",\n            \"spinitiated_url\": \"https://example.com/spurl\",\n            \"static_attrs\": {},\n            \"role_attrs\": {},\n            \"attribute_transformations\": {}\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/admin/v2/integrations",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v2",
										"integrations"
									]
								},
								"description": "https://duo.com/docs/adminapi#create-integration"
							},
							"response": []
						},
						{
							"name": "Modify SSO Integration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const utils = eval(globals.loadUtils);",
											"utils.writeHeader(\"Modify SSO Integration post request tests\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if adminapi_admins is an integer\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.response.adminapi_admins).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Check if adminapi_info is an integer\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.response.adminapi_info).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Validate that 'stat' field is 'OK'\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.stat).is.equal('OK');",
											"    console.log(`SSO Integration updated successfully.`);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Generic SSO Integration Update\",\n    \"self_service_allowed\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/admin/v2/integrations/{{integration_key}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v2",
										"integrations",
										"{{integration_key}}"
									]
								},
								"description": "https://duo.com/docs/adminapi#modify-integration"
							},
							"response": []
						}
					],
					"description": "Creation of generic SSO integrations via the Admin API requires the following two feature flags to be enabled on the account:\n\n**Allow the use of Admin API for SSO integrations**\n\n**Allow the use of CloudSSO Generic SAML Service Provider API**"
				},
				{
					"name": "Create Integration (v3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Validate adminapi_admins field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response.adminapi_admins).to.be.a('number');",
									"    pm.expect(responseData.response.adminapi_admins).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Validate adminapi_info field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response.adminapi_info).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"The adminapi_integrations field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response.adminapi_integrations).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Validate 'stat' response is 'OK\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.stat).is.equal('OK');",
									"    pm.environment.set(\"integration_key\", responseData.response.integration_key);",
									"    console.log(\"New integration key: \", responseData.response.integration_key);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Citrix NetScaler OIDC Integration via API (v3)\",\n    \"type\": \"netscaler-web\",\n    \"groups_allowed\": \"DG3ZYRRND38JQ7PCFQOG,DGAXLR0P38G93M9ZIBFH\",\n    \"user_access\": \"PERMITTED_GROUPS\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v3/integrations",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v3",
								"integrations"
							]
						},
						"description": "https://duo.com/docs/adminapi#create-integration"
					},
					"response": []
				},
				{
					"name": "Retrieve Integrations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/integrations",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"integrations"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-integrations"
					},
					"response": []
				},
				{
					"name": "Create Integrations (legacy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(pm.globals.loadUtils);",
									"utils.writeHeader(\"Create integration post request tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response 'stat' is 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.stat).to.equal('OK');",
									"    pm.collectionVariables.set(\"integration_key\", responseData.response.integration_key);",
									"    console.log(\"New integration key: \", responseData.response.integration_key);",
									"    console.log(\"integration_key Environment variable set.\")",
									"",
									"});",
									"",
									"",
									"pm.test(\"Name should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.reponse.name).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/integrations?name=\"Test RDP Integration via API\"&type=rdp",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations"
							],
							"query": [
								{
									"key": "name",
									"value": "\"Test RDP Integration via API\"",
									"description": "Required"
								},
								{
									"key": "type",
									"value": "rdp",
									"description": "Required"
								},
								{
									"key": "adminapi_admins",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_info",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_integrations",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_log",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_resource",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_settings",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_write_resource",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "enroll_policy",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups_allowed",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "networks_for_api_access",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "notes",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "trusted_device_days",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "self_service_allowed",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "username_normalization_policy",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#create-integration"
					},
					"response": []
				},
				{
					"name": "Retrieve Integration by Integration Key",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/integrations/{{integration_key}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"integrations",
								"{{integration_key}}"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-integration-by-integration-key"
					},
					"response": []
				},
				{
					"name": "Modify Integration",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/integrations/[integration_key]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"integrations",
								"[integration_key]"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "networks_for_api_access",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_admins",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_info",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_log",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_resource",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_settings",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_write_resource",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "trusted_device_days",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "enroll_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups_allowed",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist_enroll_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist_enroll_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "policy_key",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "reset_secret_key",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "self_service_allowed",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "username_normalization_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#modify-integration"
					},
					"response": []
				},
				{
					"name": "Delete Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(globals.loadUtils);",
									"utils.writeHeader(\"Post integration delete tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.response).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.stat).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response 'stat' to be 'OK'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.stat).to.equal('OK');",
									"    console.log(\"integration deleted successfully.\")",
									"});",
									"",
									"",
									"pm.test(\"Stat field is a string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.stat).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/integrations/{{integration_key}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"integrations",
								"{{integration_key}}"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-integration"
					},
					"response": []
				},
				{
					"name": "Retrieve secret key",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/integrations/{{integration_key}}/skey",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations",
								"{{integration_key}}",
								"skey"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OAUTH client secret",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/integrations/oauth_cc/{{integration_key}}/client_secret/{{client_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"integrations",
								"oauth_cc",
								"{{integration_key}}",
								"client_secret",
								"{{client_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset OAUTH client secret",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/integrations/oauth_cc/{{integration_key}}/client_secret/{{client_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"integrations",
								"oauth_cc",
								"{{integration_key}}",
								"client_secret",
								"{{client_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve OIDC client secret",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/integrations/oidc/{{integration_key}}/client_secret",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"integrations",
								"oidc",
								"{{integration_key}}",
								"client_secret"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset OIDC client secret",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/integrations/oidc/{{integration_key}}/client_secret",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"integrations",
								"oidc",
								"{{integration_key}}",
								"client_secret"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#integrations"
		},
		{
			"name": "Policies",
			"item": [
				{
					"name": "Create policy and update",
					"item": [
						{
							"name": "Add new policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Policy key is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.response.policy_key).to.exist.and.to.have.lengthOf.at.least(1, \"Policy key should not be empty\");",
											"",
											"    pm.environment.set(\"policy_key\", responseData.response.policy_key);",
											"    console.log(\"New policy key: \", responseData.response.policy_key);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy_name\": \"Test Policy via API\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/admin/v2/policies",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v2",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update policy deny new users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Policy key should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    console.log(\"Policy key: \", responseData.response.policy_key);",
											"    pm.expect(responseData.response.policy_key).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Policy name is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"    console.log(\"Policy name: \", responseData.response.policy_name);",
											"    pm.expect(responseData.response.policy_name).to.exist.and.to.not.be.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sections\": {\n        \"new_user\": {\n            \"new_user_behavior\": \"deny\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/admin/v2/policies/{{policy_key}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v2",
										"policies",
										"{{policy_key}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This folder contains all of the Duo Admin API calls needed to create a new poliy and then update that policy to restrict authentication factors.\n\nRun this folder to create a new policy, update that policy to change the new user section to deny.\n\nA new \"policy_key\" environment variable is created to store the newly created policy key.\n\nUse the Delete Policy request in the folder above to delete the newly created policy when done."
				},
				{
					"name": "Summarize Policies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/policies/summary",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all policies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/policies",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get policy by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/policies/{{policy_key}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"{{policy_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resulting policy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/policies/calculate?user_id={{user_id}}&integration_key={{integration_key}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"calculate"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}",
									"description": "[REQUIRED} The user_id of the user to evaluate, as obtained from the Retrieve Users Admin API endpoint or from the Duo Admin Panel."
								},
								{
									"key": "integration_key",
									"value": "{{integration_key}}",
									"description": "[REQUIRED] The integration_key of the application to evaluate, as obtained from the Retrieve Integrations Admin API endpoint or from the Duo Admin Panel.\n\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Copy Policy",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"policy_key\": \"POLBQD6WR0YTIMMNP3O3\",\n    \"new_policy_names_list\": [\"Policy Copy 1\", \"Policy Copy 2\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v2/policies/copy",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"copy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new policy",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"policy_name\": \"New Policy Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v2/policies",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"apply_to_apps\": {\n        \"apply_list\": [\n            \"DIATHSM0CLWVGJ181IKD\",\n            \"DIVP5RPQ777IKO0SE9SK\",\n            \"DI4DY7991KIAMZ5LCAF7\"\n        ]\n    },\n    \"apply_to_groups_in_apps\": {\n        \"apply_group_policies_list\": [\n            {\n                \"app_integration_key\": \"DI3ZS167EVMT4IQIQQU6\",\n                \"group_id_list\": [\n                    \"DG8BG8E6TTA4XXA1DWJY\"\n                ]\n            },\n            {\n                \"app_integration_key\": \"DIHNL0AM2AFCHU2GWQVQ\",\n                \"group_id_list\": [\n                    \"DG8BG8E6TTA4XXA1DWJY\"\n                ]\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v2/policies/{{policy_key}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"{{policy_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = eval(globals.loadUtils);",
									"utils.writeHeader(\"Delete policy post request tests\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - response and stat\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('response');",
									"    pm.expect(responseData).to.have.property('stat');",
									"    pm.expect(responseData.stat).to.equal('OK');",
									"    pm.environment.unset(\"policy_key\");",
									"});",
									"",
									"",
									"pm.test(\"Response field should be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.response).to.be.empty;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/policies/{{policy_key}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"{{policy_key}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Endpoints",
			"item": [
				{
					"name": "Retrieve Endpoints",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/endpoints",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"endpoints"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-endpoints"
					},
					"response": []
				},
				{
					"name": "Retrieve Endpoints by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/endpoints/[epkey]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"endpoints",
								"[epkey]"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-endpoint-by-id"
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#endpoints"
		},
		{
			"name": "Registered Devices",
			"item": [
				{
					"name": "Blocked",
					"item": [
						{
							"name": "Retrieve Blocked Devices",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/registered_devices/blocked",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"registered_devices",
										"blocked"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Blocked Devices by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/registered_devices/blocked/{{compkey}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"registered_devices",
										"blocked",
										"{{compkey}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Devices",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"registered_device_key_list\": [\"compkey_1\", \"compkey_2\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/admin/v1/registered_devices/blocked",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"registered_devices",
										"blocked"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Device by ID",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/registered_devices/blocked/{{compkey}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"registered_devices",
										"blocked",
										"{{compkey}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Devices",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"registered_device_key_list\": [\"compkey_1\", \"compkey_2\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{apihost}}/admin/v1/registered_devices/blocked",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"registered_devices",
										"blocked"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Device by ID",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{apihost}}/admin/v1/registered_devices/blocked/{{compkey}}",
									"protocol": "https",
									"host": [
										"{{apihost}}"
									],
									"path": [
										"admin",
										"v1",
										"registered_devices",
										"blocked",
										"{{compkey}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve Registered Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/registered_devices",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"registered_devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Registered Device by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/registered_devices/{{registered_device_key}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"registered_devices",
								"{{registered_device_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Registered Device",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/registered_devices/{{registered_device_key}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"registered_devices",
								"{{registered_device_key}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Passport",
			"item": [
				{
					"name": "Get Configuration",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/passport/config",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"passport",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Configuration",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"disabled_groups\": [],\n    \"enabled_groups\": [],\n    \"enabled_status\": \"enabled\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v2/passport/config",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"passport",
								"config"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Administrators",
			"item": [
				{
					"name": "Retrieve Administrators",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrators"
					},
					"response": []
				},
				{
					"name": "Create Administrators",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins?email&name",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins"
							],
							"query": [
								{
									"key": "email",
									"value": null,
									"description": "Required"
								},
								{
									"key": "name",
									"value": null,
									"description": "Required"
								},
								{
									"key": "phone",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "role",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restricted_by_admin_units",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "send_email",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "token_id",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "valid_days",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#create-administrator"
					},
					"response": []
				},
				{
					"name": "Retrieve Administrator by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/[admin_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrator-by-id"
					},
					"response": []
				},
				{
					"name": "Modify Administrator",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/[admin_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "phone",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "password_change_required",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "role",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restricted_by_admin_units",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "status",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "token_id",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#modify-administrator"
					},
					"response": []
				},
				{
					"name": "Delete Administrator",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/[admin_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-administrator"
					},
					"response": []
				},
				{
					"name": "Reset Administrator Authentication Attempts",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/[admin_id]/reset",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"reset"
							]
						},
						"description": "https://duo.com/docs/adminapi#reset-administrator-authentication-attempts"
					},
					"response": []
				},
				{
					"name": "Clear Administrator Expiration",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/{{admin_id}}/clear_inactivity",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"{{admin_id}}",
								"clear_inactivity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email Activation Link to Administrator Pending Activation",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/[admin_id]/activation_link/email",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"activation_link",
								"email"
							]
						},
						"description": "https://duo.com/docs/adminapi#email-activation-link-to-administrator-pending-activation"
					},
					"response": []
				},
				{
					"name": "Delete Activation Link to Administrator Pending Activation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/[admin_id]/activation_link",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"activation_link"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-activation-link-from-administrator-pending-activation"
					},
					"response": []
				},
				{
					"name": "Create Activation Link for Administrator Pending Activation",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/[admin_id]/activation_link",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"activation_link"
							]
						},
						"description": "https://duo.com/docs/adminapi#create-activation-link-for-administrator-pending-activation"
					},
					"response": []
				},
				{
					"name": "Create Administrator Activation Link",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/activations?email",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"activations"
							],
							"query": [
								{
									"key": "email",
									"value": null,
									"description": "Required"
								},
								{
									"key": "admin_name",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "admin_role",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "send_email",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "valid_days",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#create-administrator-activation-link"
					},
					"response": []
				},
				{
					"name": "Retrieve Pending Administrator Activation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/activations?limit&offset",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"activations"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional"
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional"
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-pending-administrator-activations"
					},
					"response": []
				},
				{
					"name": "Delete Pending Administrator Activation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/activations/[admin_activation_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"activations",
								"[admin_activation_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-pending-administrator-activation"
					},
					"response": []
				},
				{
					"name": "Sync Admin from directory",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/directorysync/{{directory_key}}/syncadmin?email={{admin_email}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"directorysync",
								"{{directory_key}}",
								"syncadmin"
							],
							"query": [
								{
									"key": "email",
									"value": "{{admin_email}}",
									"description": "[REQUIRED] Email address of admin to sync"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Admin External Password Management Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/password_mgmt?limit&offset",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"password_mgmt"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional"
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional"
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-admin-external-password-management-status"
					},
					"response": []
				},
				{
					"name": "Retrieve Admin External Password Management Status by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/[admin_id]/password_mgmt",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"password_mgmt"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-admin-external-password-management-status-by-id"
					},
					"response": []
				},
				{
					"name": "Modify Admin External Password Management Status or Password",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/[admin_id]/password_mgmt",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"password_mgmt"
							],
							"query": [
								{
									"key": "has_external_password_mgmt",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "password",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#modify-admin-external-password-management-status-or-password"
					},
					"response": []
				},
				{
					"name": "Retrieve Administrator Authentication Factors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/allowed_auth_methods",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"allowed_auth_methods"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrator-authentication-factors"
					},
					"response": []
				},
				{
					"name": "Restrict Administrator Authentication Factors",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/admins/allowed_auth_methods",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"allowed_auth_methods"
							],
							"query": [
								{
									"key": "hardware_token_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "mobile_otp_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "push_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "voice_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "yubikey_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#restrict-administrator-authentication-factors"
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#administrators"
		},
		{
			"name": "Administrative Units",
			"item": [
				{
					"name": "Retrieve Administrative Units",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units"
							],
							"query": [
								{
									"key": "admin_id",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "group_id",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "integration_key",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrative-units"
					},
					"response": []
				},
				{
					"name": "Retrieve Administrative Unit Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units/[admin_unit_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrative-unit-details"
					},
					"response": []
				},
				{
					"name": "Add Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units?name&description",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Required"
								},
								{
									"key": "description",
									"value": null,
									"description": "Required"
								},
								{
									"key": "restrict_by_groups",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restrict_by_integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "admins",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#add-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Modify Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units/[admin_unit_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "description",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restrict_by_groups",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restrict_by_integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "admins",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#modify-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Add Administrator to Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units/[admin_unit_id]/admin/[admin_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"admin",
								"[admin_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#add-administrator-to-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Remove Administrator from Administrative Unit",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units/[admin_unit_id]/admin/[admin_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"admin",
								"[admin_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#remove-administrator-from-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Add Group to Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units/[admin_unit_id]/group/[goup_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"group",
								"[goup_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#add-group-to-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Remove Group from Administrative Unit",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units/[admin_unit_id]/group/[goup_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"group",
								"[goup_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#remove-group-from-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Add Integration to Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units/[admin_unit_id]/integration/[integration_key]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"integration",
								"[integration_key]"
							]
						},
						"description": "https://duo.com/docs/adminapi#add-integration-to-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Remove Integration from Administrative Unit",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units/[admin_unit_id]/integration/[integration_key]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"integration",
								"[integration_key]"
							]
						},
						"description": "https://duo.com/docs/adminapi#remove-integration-from-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Delete Administrative Unit",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/administrative_units/[admin_unit_id]",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-administrative-unit"
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#administrative-units"
		},
		{
			"name": "Logs",
			"item": [
				{
					"name": "Authentication Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/logs/authentication?limit=1000&mintime={{mintime}}&maxtime={{maxtime}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"logs",
								"authentication"
							],
							"query": [
								{
									"key": "limit",
									"value": "1000",
									"description": "Optional"
								},
								{
									"key": "next_offset",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "ts:asc",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "mintime",
									"value": "{{mintime}}",
									"description": "Required: Defaults to the number of days defined in the \"timestampDaysOffset\" collection variable"
								},
								{
									"key": "maxtime",
									"value": "{{maxtime}}",
									"description": "Required: Defaults to current time"
								},
								{
									"key": "applications",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "users",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "event_types",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "factors",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "phone_numbers",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "reasons",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "results",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "registration_id",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "token_id",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "webauthnkey",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication Logs (Legacy v1)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/logs/authentication",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"logs",
								"authentication"
							],
							"query": [
								{
									"key": "mintime",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activity Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/logs/activity?mintime=1730925064000&maxtime=1730997064000",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"logs",
								"activity"
							],
							"query": [
								{
									"key": "mintime",
									"value": "1730925064000",
									"description": "[REQUIRED] Unix timestamp in milliseconds of the oldest log entries to collect"
								},
								{
									"key": "maxtime",
									"value": "1730997064000",
									"description": "[REQUIRED] Unix timestamp in milliseconds of newest log entry to collect. Must be greater than `mintime` value and no more than 180 days from today."
								},
								{
									"key": "limit",
									"value": "1000",
									"description": "[OPTIONAL] Number of log entries to return. Default is 100. Max is 1000",
									"disabled": true
								},
								{
									"key": "next_offset",
									"value": null,
									"description": "[OPTIONAL] Offset to begin log retrieval. Used with paged responses when more than `limit` entries are available. This ia a comma separated string containing a timestamp and transaction ID Example: 1547486297000,5bea1c1e-612c-4f1d-b310-75fd31385b15",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "ts:desc",
									"description": "[OPTIONAL] Order for the returned results. Options are 'ts:asc' or ts:desc' Default is 'ts:desc'",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Administrator Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/logs/administrator",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"logs",
								"administrator"
							],
							"query": [
								{
									"key": "mintime",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Telephony Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/logs/telephony",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"logs",
								"telephony"
							],
							"query": [
								{
									"key": "mintime",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Telephony Logs (v2)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v2/logs/telephony?mintime=1691537004000&maxtime=1694201004000",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v2",
								"logs",
								"telephony"
							],
							"query": [
								{
									"key": "mintime",
									"value": "1691537004000",
									"description": "Required. Unix timestamp in milliseconds."
								},
								{
									"key": "maxtime",
									"value": "1694201004000",
									"description": "Required. Unix timestamp in milliseconds."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Offline Enrollment Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/logs/offline_enrollment",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"logs",
								"offline_enrollment"
							],
							"query": [
								{
									"key": "mintime",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#logs"
		},
		{
			"name": "Trust Monitor",
			"item": [
				{
					"name": "Retrieve Events",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/trust_monitor/events",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"trust_monitor",
								"events"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								},
								{
									"key": "mintime",
									"value": "1613722194760",
									"description": "Required: Return records that have a 13 character Unix timestamp in milliseconds of mintime or later. This value must be strictly less then maxtime.",
									"disabled": true
								},
								{
									"key": "maxtime",
									"value": "1614722194860",
									"description": "Required: Return records that have a 13 character Unix timestamp in milliseconds of maxtime or earlier. This value must be strictly greater then mintime.",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Optional: The type of security event.\n\nauth\tReturn security events that are denied anomalous authentications.\n\nbypass_status_enabled\tReturn security events that are bypass status enabled.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#trust-monitor"
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Retrieve Settings",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/settings",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Settings",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/settings",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"settings"
							],
							"query": [
								{
									"key": "caller_id",
									"value": "",
									"description": "Optional: Automated calls will appear to come from this number. This does not apply to text messages. Customizing this number may cause telephony providers to flag your number as fraudulent and result in failed user authentications.",
									"disabled": true
								},
								{
									"key": "fraud_email",
									"value": "\"\"",
									"description": "Optional: The email address to be notified when a user reports a fraudulent authentication attempt or is locked out due to failed authentication attempts, or empty for all administrators will be notified. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared.",
									"disabled": true
								},
								{
									"key": "fraud_email_enabled",
									"value": null,
									"description": "Optional: Set to true to enable fraudulent authentication notification emails. False disables the fraud email functionality. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared.",
									"disabled": true
								},
								{
									"key": "inactive_user_expiration",
									"value": null,
									"description": "Optional: Users will be automatically deleted if they are inactive (no successful logins) for a this amount of days. Minimum: 30 days. Maximum: 365 days.",
									"disabled": true
								},
								{
									"key": "keypress_confirm",
									"value": null,
									"description": "Optional: The key for users to press to authenticate, or empty if any key should be pressed to authenticate. If this is empty, keypress_fraud must be as well.",
									"disabled": true
								},
								{
									"key": "keypress_fraud",
									"value": null,
									"description": "Optional: The key for users to report fraud, or empty if any key should be pressed to authenticate. If this is empty, keypress_confirm must be as well.\n",
									"disabled": true
								},
								{
									"key": "language",
									"value": null,
									"description": "Optional: Sets the language used in the browser-based user authentication prompt. One of: “EN”, “DE”, “FR”. Default: “EN”",
									"disabled": true
								},
								{
									"key": "lockout_expire_duration",
									"value": null,
									"description": "Optional: If non-zero, the time in minutes until a locked-out user’s status reverts to “Active”. If 0, a user remains locked out until their status is manually changed (By an admin or API call). Minimum: 5 minutes. Maximum: 30000 minutes.",
									"disabled": true
								},
								{
									"key": "lockout_threshold",
									"value": null,
									"description": "Optional: The number of consecutive failed authentication attempts before the user’s status is set to “Locked Out” and the user is denied access.",
									"disabled": true
								},
								{
									"key": "minimum_password_length",
									"value": null,
									"description": "Optional: The minimum number of characters that an administrator’s Duo Admin Panel password must contain. This is only enforced on password creation and reset; existing passwords will not be invalidated. \n\nDefault: 12.",
									"disabled": true
								},
								{
									"key": "mobile_otp_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use authenticate with a passcode generated by Duo Mobile. If false, users will not be able to authenticate with a passcode generated by Duo Mobile. Note that if false, this will override Duo Mobile passcodes for any groups.",
									"disabled": true
								},
								{
									"key": "password_requires_lower_alpha",
									"value": null,
									"description": "Optional: If true, administrator passwords will be required to contain a lower case alphabetic character. If false, administrator passwords will not be required to contain a lower case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
									"disabled": true
								},
								{
									"key": "password_requires_numeric",
									"value": null,
									"description": "Optional: If true, administrator passwords will be required to contain a numeric character. If false, administrator passwords will not be required to contain a numeric character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
									"disabled": true
								},
								{
									"key": "password_requires_special",
									"value": null,
									"description": "Optional: If true, administrator passwords will be required to contain a special (non-alphanumeric) character. If false, administrator passwords will not be required to contain a special (non-alphanumeric) character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
									"disabled": true
								},
								{
									"key": "password_requires_upper_alpha",
									"value": null,
									"description": "Optional: If true, administrator passwords will be required to contain an upper case alphabetic character. If false, administrator passwords will not be required to contain an upper case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
									"disabled": true
								},
								{
									"key": "push_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use Duo Push to authenticate. If false, users will not be able to use Duo Push to authenticate. Note that if false, this will override push_enabled for any groups.",
									"disabled": true
								},
								{
									"key": "sms_batch",
									"value": null,
									"description": "Optional: How many passcodes to send at one time, up to 10.",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use SMS passcodes to authenticate. If false, users will not be able to use SMS passcodes to authenticate. Note that if false, this will override sms_enabled for any groups.",
									"disabled": true
								},
								{
									"key": "sms_expiration",
									"value": null,
									"description": "Optional: The time in minutes to expire and invalidate SMS passcodes, or empty if they should not expire.",
									"disabled": true
								},
								{
									"key": "sms_message",
									"value": null,
									"description": "Optional: Description sent with every batch of SMS passcodes.",
									"disabled": true
								},
								{
									"key": "sms_refresh",
									"value": null,
									"description": "Optional: If 1, a new set of SMS passcodes will automatically be sent after the last one is used. If 0, a new set will not be sent.",
									"disabled": true
								},
								{
									"key": "telephony_warning_min",
									"value": null,
									"description": "Optional: Configure a alert to be sent when the account has fewer than this many telephony credits remaining.",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": null,
									"description": "Optional: This is the timezone used when displaying timestamps in the Duo Admin Panel. Timezones must be entries in the IANA Time Zone Database, for example, “US/Eastern”, “Australia/Darwin”, “GMT”.",
									"disabled": true
								},
								{
									"key": "voice_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to authenticate using voice callback. If false, users will not be able to authenticate using voice callback. Note that if false, this will override voice_enabled for any groups.",
									"disabled": true
								},
								{
									"key": "user_telephony_cost_max",
									"value": null,
									"description": "Optional: The maximum number of telephony credits a user may consume in a single authentication event. This excludes Duo administrators authenticating to the Duo administration panel. Default: 20.",
									"disabled": true
								},
								{
									"key": "u2f_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use authenticate with a U2F device. If false, users will not be able to authenticate with a U2F device. Default: false.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Duo Mobile Logo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/logo",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"logo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Duo Mobile Logo",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/logo",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"logo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duo Mobile Logo",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/logo",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"logo"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#settings"
		},
		{
			"name": "Custom Branding",
			"item": [
				{
					"name": "Retrieve Live Custom Branding",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/branding",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"branding"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Live Custom Branding",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "background_img",
									"value": "\"\"",
									"description": "A base64 encoded background image in PNG format, with maximum size less than 3MB and dimensions between 12 by 12 pixels and 3840 by 2160 pixels. Shown in Duo SSO and Duo Universal Prompt.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "card_accent_color",
									"value": "#029B19",
									"description": "A CSS hex color shown as the hash symbol (#) followed by three or six hexadecimal digits, which represents the colored line appearing at the top of the interactive user interface. Shown in Duo SSO and Universal Prompt.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "logo",
									"value": "",
									"description": "A base64 encoded logo image in PNG format, with maximum size less than 200KB and dimensions between 12 by 12 pixels and 500 by 500 pixels. Shown in Duo SSO, Duo Universal Prompt, and traditional prompt.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "page_background_color",
									"value": "",
									"description": "A CSS hex color shown as the hash symbol (#) followed by three or six hexadecimal digits, which represents the color appearing behind the user interface and any transparent background image. Shown in Duo SSO and Universal Prompt.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "powered_by_duo",
									"value": "false",
									"description": "If true, Duo SSO, Duo Universal Prompt, and traditional prompt show the \"Secured by Duo\" branding. Otherwise, false.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sso_custom_username_label",
									"value": "",
									"description": "Specify the string that is displayed for the custom SSO Login Label. Can be Username, Email Address, or a custom string. The custom string can only contain letters and numbers (maximum length 100 characters). No effect unless Duo SSO is enabled and configured.\n",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v1/branding",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"branding"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Draft Custom Branding",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/branding/draft",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"branding",
								"draft"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Draft Custom Branding",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "background_img",
									"value": "\"\"",
									"description": "A base64 encoded background image in PNG format, with maximum size less than 3MB and dimensions between 12 by 12 pixels and 3840 by 2160 pixels. Shown in Duo SSO and Duo Universal Prompt.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "card_accent_color",
									"value": "#029B19",
									"description": "A CSS hex color shown as the hash symbol (#) followed by three or six hexadecimal digits, which represents the colored line appearing at the top of the interactive user interface. Shown in Duo SSO and Universal Prompt.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "logo",
									"value": "",
									"description": "A base64 encoded logo image in PNG format, with maximum size less than 200KB and dimensions between 12 by 12 pixels and 500 by 500 pixels. Shown in Duo SSO, Duo Universal Prompt, and traditional prompt.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "page_background_color",
									"value": "",
									"description": "A CSS hex color shown as the hash symbol (#) followed by three or six hexadecimal digits, which represents the color appearing behind the user interface and any transparent background image. Shown in Duo SSO and Universal Prompt.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "powered_by_duo",
									"value": "false",
									"description": "If true, Duo SSO, Duo Universal Prompt, and traditional prompt show the \"Secured by Duo\" branding. Otherwise, false.\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sso_custom_username_label",
									"value": "",
									"description": "Specify the string that is displayed for the custom SSO Login Label. Can be Username, Email Address, or a custom string. The custom string can only contain letters and numbers (maximum length 100 characters). No effect unless Duo SSO is enabled and configured.\n",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v1/branding/draft",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"branding",
								"draft"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Draft Custom Branding User by ID",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/branding/draft/users/{{user_id}}",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"branding",
								"draft",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Draft Custom Branding User by ID",
					"request": {
						"method": "DELETE",
						"header": []
					},
					"response": []
				},
				{
					"name": "Publish Draft Custom Branding",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/branding/draft/publish",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"branding",
								"draft",
								"publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Custom Messaging",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/branding/custom_messaging",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"branding",
								"custom_messaging"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Custom Messaging",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "help_links",
									"value": "https://help.duo.com",
									"description": "A comma-separated list of up to two custom external links shown to users in the Universal Prompt. Each URL must begin with http:// or https://.",
									"type": "text"
								},
								{
									"key": "help_text",
									"value": "Follow the link for help",
									"description": "Customized text string associated with the specified locale. The user's browser's preferred language settings determine which language to show in the Universal Prompt. The first locale and message text in the list matches the default language specified in global Settings and is also shown in the traditional web prompt and in Duo Desktop. Up to 200 characters. No support for hyperlinks.",
									"type": "text"
								},
								{
									"key": "locale",
									"value": "es_ES",
									"description": "The language of the help text. One of: en_US (English), ca_ES (Catalan), cs_CZ (Czech), de_DE (German), es_ES (Spanish - Spain), es_419 (Spanish - Latin America), fi_FI (Finnish), fr_FR (French), hi_IN (Hindi), id_ID (Indonesian), it_IT (Italian), ja_JP (Japanese), ko_KR (Korean), nb_NO (Norwegian - Bokmål), nl_NL (Dutch), pl_PL (Polish), pt_BR (Portuguese - Brazil), pt_PT (Portuguese - Portugal), sv_SE (Swedish), th_TH (Thai), tr_TR (Turkish), vi_VN (Vietnamese), zh_Hans_CN (Chinese - Simplified), or zh_Hant_TW (Chinese - Traditional).",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{apihost}}/admin/v1/branding/custom_messaging",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"branding",
								"custom_messaging"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account Info",
			"item": [
				{
					"name": "Retrieve Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "",
									"description": "Optional: Specify a user name (or username alias) to look up a single user.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 300",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Telephony Credits Used Report Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/users",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "",
									"description": "Optional: Specify a user name (or username alias) to look up a single user.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 300",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication Attempts Report",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/info/authentication_attempts",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"info",
								"authentication_attempts"
							],
							"query": [
								{
									"key": "maxtime",
									"value": "",
									"description": "Optional: Limit report to events before this UNIX timestamp. Defaults to the current time.",
									"disabled": true
								},
								{
									"key": "mintime",
									"value": null,
									"description": "Optional: Limit report to events after this UNIX timestamp. Defaults to thirty days before maxtime.\n",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users with Authentication Attempts Report",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apihost}}/admin/v1/info/user_authentication_attempts",
							"protocol": "https",
							"host": [
								"{{apihost}}"
							],
							"path": [
								"admin",
								"v1",
								"info",
								"user_authentication_attempts"
							],
							"query": [
								{
									"key": "maxtime",
									"value": "",
									"description": "Optional: Limit report to events before this UNIX timestamp. Defaults to the current time.",
									"disabled": true
								},
								{
									"key": "mintime",
									"value": null,
									"description": "Optional: Limit report to events after this UNIX timestamp. Defaults to thirty days before maxtime.\n",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#account-info"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Duo API Postman Pre-Request script v4.1.0",
					"// Last updated 2025-04-22 by: Mark Tripod",
					"",
					"var URL = require(\"url\");",
					"var cryptojs = require(\"crypto-js\");",
					"",
					"function getTimestamps() {",
					"    console.log(\" *** Populating timestamps ***\")",
					"    const timestampMs = new Date().getTime();",
					"    pm.variables.set(\"maxtime\", timestampMs);",
					"    var daysOffset = pm.variables.get(\"timestampDaysOffset\");",
					"    if (!daysOffset) {",
					"        daysOffset = 1;",
					"        console.log(\"'daysOffset' Collection variable not set. Defaulting to 1.\")",
					"    }",
					"    const dateOffset = (24*60*60*1000) * daysOffset;",
					"    pm.variables.set(\"mintime\", timestampMs - dateOffset);",
					"    console.log(\"mintime (ms): \", timestampMs);",
					"    console.log(\"maxtime (ms): \", pm.variables.get(\"maxtime\"));",
					"}",
					"",
					"function writeHeader(text) {",
					"  var breakStr =",
					"    \"============================================================================\";",
					"  var fullWidth = breakStr.length;",
					"  var padding = (fullWidth - text.length) / 2;",
					"  var paddingString = \" \".repeat(padding);",
					"  var msgStr = paddingString + text + paddingString;",
					"  console.log(breakStr);",
					"  console.log(msgStr);",
					"  console.log(breakStr);",
					"}",
					"",
					"function replacePathVars() {",
					"  console.log(\" *** Entering replacePathVars() ***\");",
					"  var pathIndex = 0;",
					"  pm.request.url.path.forEach(function (element) {",
					"    if (element.includes(\"{{\")) {",
					"      console.log(`    Variable ${element} found in request URL`);",
					"      var tmpElement = element.replace(\"{{\", \"\").replace(\"}}\", \"\");",
					"      console.log(`    Looking for value assigned to ${tmpElement}`);",
					"      var newElement = getVar(tmpElement);",
					"      pm.request.url.path[pathIndex] = newElement;",
					"      console.log(",
					"        `    path element ${pathIndex} is now ${pm.request.url.path[pathIndex]}`",
					"      );",
					"    }",
					"    pathIndex += 1;",
					"  });",
					"}",
					"",
					"function replaceQueryVars() {",
					"  console.log(\" *** Entering replaceQueryVars() ***\");",
					"  for (var i = 0; i < pm.request.url.query.count(); i++) {",
					"    console.log(\".  Query string key: \", pm.request.url.query.idx(i).key);",
					"    if (pm.request.url.query.idx(i).disabled == true) {",
					"      console.log(",
					"        \".   Skipping disabled query string parameter\",",
					"        pm.request.url.query.idx(i).key",
					"      );",
					"      continue;",
					"    }",
					"    if (pm.request.url.query.idx(i).key.includes(\"{{\")) {",
					"      pm.request.url.query.idx(i).key = pm.variables.replaceIn(",
					"        pm.request.url.query.idx(i).key",
					"      );",
					"      console.log(\".  New key: \", pm.request.url.query.idx(i).key);",
					"    }",
					"    console.log(\".  Query string value: \", pm.request.url.query.idx(i).value);",
					"    if (pm.request.url.query.idx(i).value.includes(\"{{\")) {",
					"      pm.request.url.query.idx(i).value = pm.variables.replaceIn(",
					"        pm.request.url.query.idx(i).value",
					"      );",
					"      console.log(\".  New value: \", pm.request.url.query.idx(i).value);",
					"    }",
					"  }",
					"}",
					"",
					"function getVar(varName) {",
					"  var tmpVar = pm.variables.get(varName);",
					"  if (!tmpVar) {",
					"    console.log(`WARNING: ${varName} variable is missing or invalid.`);",
					"    throw new Error(",
					"      \"Please ensure that the ikey, skey, and apihost entries are defined with proper values in either the Postman Environment or Collection variables.\"",
					"    );",
					"  } else {",
					"    console.log(`  ===> ${varName} value found.`);",
					"  }",
					"  return tmpVar;",
					"}",
					"",
					"/**",
					" * @param {pm.request.method} httpMethod - The pm.request.method property",
					" * @param {pm.request.body} requestBody - The pm.request.body property",
					" */",
					"function getAuthHeader(httpMethod, hostname, path, q_str, requestBody) {",
					"  writeHeader(\"Calculating Duo Authentication header\");",
					"",
					"  console.log(\"Method: \", httpMethod);",
					"  console.log(\"hostname: \", hostname);",
					"  console.log(\"Path: \", path);",
					"  console.log(\"Query string: \", q_str);",
					"  console.log(\"POST body: \", requestBody);",
					"",
					"  writeHeader(\"Retrieving Required Duo API Information\");",
					"",
					"  var IKEY = getVar(\"ikey\");",
					"  var SKEY = getVar(\"skey\");",
					"  var APIHOST = getVar(\"apihost\");",
					"",
					"  console.log(\"   ikey: \", IKEY);",
					"  console.log(\"   skey: ************************************\");",
					"  console.log(\"   apihost: \", APIHOST);",
					"",
					"  api_call = path;",
					"  console.log(\".   api_call: \", api_call);",
					"",
					"  var AUTH_TYPE;",
					"  var hmacDigest;",
					"  var post_or_put = [\"POST\", \"PUT\"];",
					"",
					"  writeHeader(\"Calculating Timestamp Header Value\");",
					"",
					"  //The current time, formatted as RFC 2822. This must be the same string as the \"Date\" header (or X-Duo-Date header).",
					"  // TODO: explore other options besides the 'moment' module since it is so large and no longer being developed.",
					"  var moment = require(\"moment\");",
					"  var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
					"  pm.variables.set(\"timestampHeader\", timestamp);",
					"  console.log(\"timestamp header value: \", timestamp);",
					"",
					"  writeHeader(\"Calculating Duo Authentication Header Value\");",
					"",
					"  console.log(\"Using HMAC-SHA512 based canonical v5 authentication header.\");",
					"  AUTH_TYPE = \"HMAC-SHA512\";",
					"  var body_length = Object.keys(requestBody).length;",
					"  var encoded_params = \"\";",
					"  var requestData = \"\";",
					"",
					"  console.log(\"Body length: \", body_length);",
					"",
					"  if (post_or_put.includes(httpMethod) && body_length != 0) {",
					"    var jsonData = JSON.parse(pm.request.body.toJSON().raw);",
					"    jsonData = JSON.stringify(jsonData);",
					"    encoded_params = jsonData;",
					"    console.log(\"encoded_params: \", encoded_params);",
					"    requestData =",
					"      timestamp +",
					"      \"\\n\" +",
					"      httpMethod +",
					"      \"\\n\" +",
					"      hostname +",
					"      \"\\n\" +",
					"      api_call +",
					"      \"\\n\" +",
					"      \"\" +",
					"      \"\\n\" +",
					"      cryptojs.SHA512(encoded_params) +",
					"      \"\\n\" +",
					"      cryptojs.SHA512(\"\");",
					"    pm.request.body = jsonData;",
					"  } else {",
					"    params_unsorted = q_str;",
					"    console.log(\"Unsorted parameters length: \", params_unsorted.length);",
					"    if (params_unsorted.length > 0) {",
					"      params_array = params_unsorted.split(\"&\");",
					"      params_array.sort();",
					"      encoded_params_array = params_array.map(urlEncodeParams); //create URL-encoded array of key=value pairs from the sorted array",
					"      encoded_params = encoded_params_array.join(\"&\");",
					"    }",
					"    requestData =",
					"      timestamp +",
					"      \"\\n\" +",
					"      httpMethod +",
					"      \"\\n\" +",
					"      hostname +",
					"      \"\\n\" +",
					"      api_call +",
					"      \"\\n\" +",
					"      encoded_params +",
					"      \"\\n\" +",
					"      cryptojs.SHA512(\"\") +",
					"      \"\\n\" +",
					"      cryptojs.SHA512(\"\");",
					"  }",
					"  //compute the HMAC-SHA512 of this canonical representation, using your Duo application's secret key as the HMAC key",
					"  hmacDigest = cryptojs.HmacSHA512(requestData, SKEY);",
					"  pm.request.headers.add({ key: \"Content-Type\", value: \"application/json\" });",
					"",
					"  //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC signature as the password.",
					"  var prebase = IKEY + \":\" + hmacDigest;",
					"  console.log(\"prebase: \", prebase);",
					"",
					"  //encodes a string in base-64",
					"  var baseComplete = btoa(prebase);",
					"  console.log(\"baseComplete: \", baseComplete);",
					"",
					"  var authHeader = \"Basic \" + baseComplete;",
					"  console.log(\"hmacauthheader: \", authHeader);",
					"  return authHeader;",
					"}",
					"",
					"function urlEncodeParams(value, index, array) {",
					"  //split the Key and Value at the first \"=\", URL-encode the Value, and rejoin them with an \"=\"",
					"  //If the separator in the split() is a regular expression that contains capturing parentheses (), matched results are included in the array",
					"  return (",
					"    value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1])",
					"  );",
					"}",
					"",
					"// Begin script execution",
					"writeHeader(\"Begin Creation of Duo API Authentication Headers\");",
					"",
					"console.log(\"PM request object: \", pm.request);",
					"console.log(\"PM request host: \", pm.request.url.host);",
					"console.log(\"Request data: \", pm.request.data);",
					"",
					"let req_url = pm.request.url.getPath();",
					"console.log(\"Request URL: \", req_url);",
					"",
					"getTimestamps();",
					"",
					"if (pm.request.url.query && pm.request.url.query.count() > 0) {",
					"  console.log(",
					"    \"Request has a query string defined. Checking for any variable definitions...\"",
					"  );",
					"  replaceQueryVars();",
					"} else {",
					"  console.log(\"Request has no query string.\");",
					"}",
					"",
					"var q_str = pm.request.url.getQueryString();",
					"console.log(\"PM parsed query string: \", q_str);",
					"var pmQueryStringElements = pm.request.url.query.toObject();",
					"console.log(\"PM query string object: \", pmQueryStringElements);",
					"",
					"console.log(\"Query string: \", q_str);",
					"if (!q_str) {",
					"  q_str = \"\";",
					"}",
					"console.log(\"q_str length: \", q_str.length);",
					"var path = pm.request.url.path;",
					"console.log(\"postman request path object: \", path);",
					"console.log(\"Replacing any variables that may be in the path.\");",
					"replacePathVars();",
					"path = path.join(\"/\");",
					"path = \"/\" + path;",
					"console.log(\"Path string: \", path.toString());",
					"",
					"if (pm.request.url.host[0] == \"{{apihost}}\") {",
					"  console.log(",
					"    \"Request URL contains {{apihost}} variable. Checking if that value is defined in the Postman Environment.\"",
					"  );",
					"  var hostname = getVar(\"apihost\");",
					"  pm.request.url.host[0] = hostname;",
					"}",
					"",
					"pm.variables.set(",
					"  \"hmacAuthHeader\",",
					"  getAuthHeader(",
					"    pm.request.method,",
					"    pm.request.url.host[0],",
					"    path,",
					"    q_str,",
					"    pm.request.body",
					"  )",
					");",
					"",
					"pm.request.headers.add({",
					"  key: \"Date\",",
					"  value: pm.variables.get(\"timestampHeader\"),",
					"});",
					"pm.request.headers.add({",
					"  key: \"Authorization\",",
					"  value: pm.variables.get(\"hmacAuthHeader\"),",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ikey",
			"value": "",
			"disabled": true
		},
		{
			"key": "skey",
			"value": "",
			"disabled": true
		},
		{
			"key": "apihost",
			"value": "",
			"disabled": true
		},
		{
			"key": "policy_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "integration_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "client_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "registered_device_key",
			"value": "",
			"type": "default"
		},
		{
			"key": "admin_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "directory_key",
			"value": "",
			"type": "default"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "timestampDaysOffset",
			"value": "",
			"type": "string"
		}
	]
}